"""Creates single plots of data stored in CDFs generated by TRANSP

This module aims to quickly produce publication quality plots using data
stored in CDF files.  Various rules have been written that automate the
majority of the plotting process, including exactly what data appears in the
title, labels, and legend.  The user may override any of these rules by
specifying their corresponding parameters in the PlotSettings class.

Variable data loaded from a CDF is stored using the Variable class within the
InputVariables class, where variable attributes such as label names and
symbols are stored here.  This means that a new Variable object needs to be
created in variables.py if the user wishes to plot any variables not already
declared in InputVariables.

Example Usage:
    * Plot of Electron Temperature and Ion Temperature:

        all_data = AllPlotData(
                PlotData(runid='129041A10', yname='te', time=0.50),
                PlotData(runid='129041A10', yname='ti', time=0.50),
        )

        # In this example, the plot title will correspond to the name of 'te', so
        # the user may wish to override this using PlotSettings as:

        psettings = PlotSettings(
            title_override='Temperatures',
        )

        # Note that the runid and time value will automatically appear in the
        # title of the plot, since all PlotData objects share the same values
        # for these attributes.  If instead we use different values such as:

        all_data = AllPlotData(
                PlotData(runid='138536A01', yname='te', time=0.75),
                PlotData(runid='129041A10', yname='ti', time=0.50),
        )

        # Then both the runid and time values will instead appear in the
        # legend for each variable.

Refer to both the PlotSettings and PlotData classes for a full list of
parameters that can be specified when creating plots.
"""

# Standard Packages
import sys; sys.path.insert(0, '../')
from dataclasses import dataclass

# 3rd Party Packages
import numpy as np
import matplotlib.pyplot as plt

# Local Packages
import modules.options
import modules.datahelper as datahelper
from plotting.modules.styles import single as plotlayout
from plotting.modules.colors import mmm as plotcolors


@dataclass
class PlotSettings:
    '''
    Settings to control various behaviors of the plot

    Parameters:
    * allow_title_runid (bool): True if the runid is allowed to appear in the title (Optional)
    * allow_title_time (bool): True if the time is allowed to appear in the title (Optional)
    * title_override (str): Overrides auto generated title if non-empty (Optional)
    * ylabel_override (str): Overrides auto generated ylabel if non-empty (Optional)
    * xlabel_override (str): Overrides auto generated xlabel if non-empty (Optional)
    * xpad (int): The percentage to pad the xaxis limits in each direction (Optional)
    * ypad (int): The percentage to pad the yaxis limits in each direction (Optional)
    '''

    allow_title_runid: bool = True
    allow_title_time: bool = True
    title_override: str = ''
    ylabel_override: str = ''
    xlabel_override: str = ''
    xpad: int = 0
    ypad: int = 0


class PlotData:
    '''
    Makes a PlotData object from user input parameters

    The names of the x-variable and y-variable must match member definitions
    in the InputVariables class.

    Parameters:
    * runid (str): The runid of the CDF
    * time (float): The time value to plot
    * yname (str): The name of the y-variable to plot
    * xname (str): The name of the x-variable to plot (Optional)
    * runname (str): A string to replace the runid that shows in plot legends or titles (Optional)
    * legend_override (str): A string to completely replace the legend label of a y-variable (Optional)
    * use_cdf_vars (bool): Uses uncalculated CDF variables instead of calculated MMM variables (Optional)
    '''

    def __init__(self, runid, time, yname, xname='rho', runname='', legend_override='', use_cdf_vars=False):
        options = modules.options.Options(runid=runid, input_time=time)
        mmm_vars, cdf_vars, __ = datahelper.initialize_variables(options)
        plot_vars = mmm_vars if not use_cdf_vars else cdf_vars
        xvar = getattr(plot_vars, xname)
        yvar = getattr(plot_vars, yname)

        self.xvals: np.ndarray = xvar.values[:, plot_vars.options.time_idx]
        self.yvals: np.ndarray = yvar.values[:, plot_vars.options.time_idx]
        self.xsymbol: str = xvar.label
        self.ysymbol: str = yvar.label
        self.xunits: str = xvar.units_label
        self.yunits: str = yvar.units_label
        self.xname: str = xvar.name
        self.yname: str = yvar.name
        self.time: float = plot_vars.options.time_str
        self.runid: str = runid
        self.runname: str = runname
        self.legend_override: str = legend_override

    def get_legend_label(self, legend_attrs):
        '''
        Gets the y-variable label for the plot legend

        If the legend override is set, then that value is used for the legend
        label.  Otherwise, either the y-variable symbol, the runname (if set) or
        runid, and the time value may be added to the legend.  Each of these
        attributes are only added to the legend if multiple y-variables have
        different values for a given attribute.

        Parameters:
        * all_data (list[PlotData]): List of PlotData objects
        * attr_name (str): The name of a LegendAttributes member

        Returns:
        * (str): The y-variable label for the legend
        '''

        # TODO: Show ysymbol vs xsymbol when xsymbols are different
        if self.legend_override:
            return self.legend_override

        legend_items = []
        if legend_attrs.show_ysymbol:
            legend_items.append(self.ysymbol)
        if legend_attrs.show_runid or legend_attrs.show_runname:
            legend_items.append(self.runname or self.runid)
        if legend_attrs.show_time:
            legend_items.append(f'{self.time}s')

        return' '.join(legend_items)


class AllPlotData:
    '''
    Stores all individual PlotData objects

    Parameters:
    * args (PlotData): Contains PlotData objects to store
    '''

    def __init__(self, *args):
        self.data: list[PlotData] = [a for a in args if isinstance(a, PlotData)]

    def get_legend_include(self, attr_name):
        '''
        Determines if a LegendAttribute should be included in the legend

        The rule for adding an attribute to the legend is if multiple plotted
        variables have different values for a checked attribute.  For example, if
        var A and var B both have different runid's, then their runid's are added
        to the legend.  If there is only one variable to plot, then no attributes
        will be added to the legend.

        Parameters:
        * all_data (list[PlotData]): List of PlotData objects
        * attr_name (str): The name of a LegendAttributes member

        Returns:
        * (bool) True if the attribute should be added to the legend
        '''

        attrs = set()
        for pdata in self.data:
            attrs.add(getattr(pdata, attr_name))

        return len(attrs) > 1

    def get_plot_limits(self, psettings):
        '''
        Gets the limits of the plot, adjusted by padding parameters set in psettings

        The axes limits are adjusted by the percentage given for xpad and ypad in
        the psettings object, in each direction for either axis.  For example, if
        ypad = 1, then the limits of the yaxis are both increased and decreased
        by 1%.  Note that MatPlotLib uses default padding of something like 5% on
        each axis, so setting padding values smaller than this value will produce
        tighter plots than what would be created if the padding wasn't adjusted.

        Parameters:
        * psettings (PlotSettings): Plot settings object
        * all_data (list[PlotData]): List of PlotData objects
        '''

        xmin = ymin = float("inf")
        xmax = ymax = -float("inf")
        for pdata in self.data:
            xmin = min(xmin, pdata.xvals.min())
            xmax = max(xmin, pdata.xvals.max())
            ymin = min(ymin, pdata.yvals.min())
            ymax = max(ymax, pdata.yvals.max())

        xoffset = (xmax - xmin) * psettings.xpad / 100
        yoffset = (ymax - ymin) * psettings.ypad / 100

        return (xmin - xoffset, xmax + xoffset), (ymin - yoffset, ymax + yoffset)

    def get_plot_title(self, psettings, legend_attrs):
        '''
        Gets the title for the plot

        If the title override is set, then that is used for the title of the plot.
        Otherwise, the name of the first y-variable defined in the all_data list
        is used as the title of the plot.  Additionally, details are added to the
        title in parenthesis if the title details switches are enabled.
        Specifically, if all plotted variables share the same runid, then the
        runid is added to the title.  Similarly, if all plotted variables share
        the same time value, then the time value is added to the title as well.

        Parameters:
        * psettings (PlotSettings): Plot settings object
        * all_data (list[PlotData]): List of PlotData objects
        * legend_attrs (LegendAttributes): Legend data object

        Returns:
        * (str): The title for the plot
        '''

        base_title = psettings.title_override or self.data[0].yname

        title_details = ''
        if psettings.allow_title_runid or psettings.allow_title_time:
            title_details_list = []
            if psettings.allow_title_runid and not (legend_attrs.show_runid or legend_attrs.show_runname):
                # all lines have same runid or runname
                title_details_list.append(self.data[0].runname or self.data[0].runid)
            if psettings.allow_title_time and not legend_attrs.show_time:
                # all lines have same time
                title_details_list.append(f'{self.data[0].time}s')
            if title_details_list:
                title_details = f' ({", ".join(title_details_list)})'

        return f'{base_title}{title_details}'

    def get_plot_ylabel(self, psettings, legend_attrs):
        '''
        Gets the yaxis label for the plot

        If the ylabel override is set, then that is used for the ylabel of the
        plot.  Otherwise, the unique units of each y-variable are added to the
        ylabel (the same units aren't repeated).  Additionally, if the y-variable
        symbols do not appear in the legend, then these unique symbols are also
        added to the ylabel.

        Parameters:
        * psettings (PlotSettings): Plot settings object
        * all_data (list[PlotData]): List of PlotData objects
        * legend_attrs (LegendAttributes): Legend data object

        Returns:
        * (str): The ylabel for the plot
        '''

        if psettings.ylabel_override:
            return psettings.ylabel_override

        ylabels = []  # Not using a set to preserve order
        for pd in self.data:
            if not legend_attrs.show_ysymbol:  # ysymbol is not in the legend
                ystr = f'{pd.ysymbol} {pd.yunits}'
                if ystr not in ylabels:
                    ylabels.append(ystr)
            elif pd.yunits not in ylabels:  # ysymbol is in the legend
                ylabels.append(pd.yunits)

        return ', '.join(ylabels)

    def get_plot_xlabel(self, psettings, legend_attrs):
        '''
        Gets the xaxis label for the plot

        If the xlabel override is set, then that is used for the xlabel of the
        plot.  Otherwise, the unique symbols and units of each x-variable are
        added to the ylabel (the same units aren't repeated).

        Parameters:
        * psettings (PlotSettings): Plot settings object
        * all_data (list[PlotData]): List of PlotData objects
        * legend_attrs (LegendAttributes): Legend data object

        Returns:
        * (str): The xlabel for the plot
        '''

        if psettings.xlabel_override:
            return psettings.xlabel_override

        xlabels = []  # Not using a set to preserve order
        for pd in self.data:
            xstr = f'{pd.xsymbol} {pd.xunits}'
            if xstr not in xlabels:
                xlabels.append(xstr)

        return ', '.join(xlabels)


class LegendAttributes:
    '''
    Stores a bool for whether each attribute should appear in the legend
    '''

    def __init__(self, ysymbol, runid, runname, time, override):
        self.show_ysymbol: bool = ysymbol
        self.show_runid: bool = runid
        self.show_runname: bool = runname
        self.show_time: bool = time
        self.show_override: bool = override

    def show_legend(self):
        '''Returns (bool): True if the legend should be shown'''

        show_legend = False
        attributes = self.get_attributes()
        for a in attributes:
            if getattr(self, a):
                show_legend = True
                break
        return show_legend

    def get_attributes(self):
        '''Returns (list[str]): all boolean legend attributes'''
        return [a for a in dir(self) if isinstance(getattr(self, a), bool)]


def main(psettings, all_data):
    '''
    Create a plot using CDF data

    Parameters:
    * psettings (PlotSettings): Plot settings object
    * all_data (AllPlotData): Object containing all PlotData objects
    '''

    plotlayout.init()
    plotcolors.init()
    ax = plt.gca()

    legend_attrs = LegendAttributes(
        ysymbol=all_data.get_legend_include('ysymbol'),
        runid=all_data.get_legend_include('runid'),
        runname=all_data.get_legend_include('runname'),
        time=all_data.get_legend_include('time'),
        override=all_data.get_legend_include('legend_override')
    )

    for pdata in all_data.data:
        ax.plot(pdata.xvals, pdata.yvals, label=pdata.get_legend_label(legend_attrs))

    xlims, ylims = all_data.get_plot_limits(psettings)

    ax.set(
        title=all_data.get_plot_title(psettings, legend_attrs),
        xlabel=all_data.get_plot_xlabel(psettings, legend_attrs),
        ylabel=all_data.get_plot_ylabel(psettings, legend_attrs),
        xlim=xlims,
        ylim=ylims,
    )

    if legend_attrs.show_legend():
        ax.legend()

    plt.show()


if __name__ == '__main__':
    '''Run this module directly to plot variable data stored in CDF files'''

    psettings = PlotSettings(
        allow_title_runid=True,
        allow_title_time=True,
        title_override='',
        ylabel_override='',
        xlabel_override='',
        ypad=1,
        xpad=0,
    )

    all_data = AllPlotData(
        PlotData(runid='129041A10', yname='te', xname='rho', time=0.50, runname=''),
        PlotData(runid='120982A09', yname='te', xname='rho', time=0.50, runname=''),
        PlotData(runid='120968A02', yname='te', xname='rho', time=0.50, runname=''),
        PlotData(runid='138536A01', yname='te', xname='rho', time=0.50, runname=''),
    )

    main(psettings, all_data)
