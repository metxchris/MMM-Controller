"""Creates single plots of data stored in CDFs or CSVs

This module aims to quickly produce publication quality plots using data
stored in CDF files generated by TRANSP, or CSV files generated by MMM
Explorer.  Various rules have been written that automate the majority of the
plotting process, including exactly what data appears in the title, labels,
and legend.  The user may override any of these rules by specifying their
corresponding parameters in the PlotSettings class.

Variable data loaded from a CDF or CSV is stored using the Variable class
within the either the InputVariables or OutputVariables, where variable
attributes such as label names and symbols are defined here.  Additionally,
the InputControls class also stores data in CSVs pertaining to control
values.  This means that a new Variable object needs to be created in
variables.py if the user wishes to plot any variables not already declared in
either InputVariables or OutputVariables.  Likewise, new Control objects will
need to be created in controls.py if needed.

An example of how to use this module has been provided below, but please refer
to both the PlotSettings and PlotData classes for a full list of parameters
that can be specified when creating plots.

Example Usage:
    * Plot of Electron Temperature and Ion Temperature (vs rho):

        all_data = AllPlotData(
                PlotData(runid='129041A10', yname='te', time=0.50),
                PlotData(runid='129041A10', yname='ti', time=0.50),
        )

        # Note that the runid and time value will automatically appear in the
        # title of the plot, since all PlotData objects share the same values
        # for these attributes.  If instead we use different attribute values
        # such as:

        all_data = AllPlotData(
                PlotData(runid='138536A01', yname='te', time=0.75),
                PlotData(runid='129041A10', yname='ti', time=0.50),
        )

        # Then both the runid and time values will instead appear in the
        # legend for each variable.
"""

# Standard Packages
import sys; sys.path.insert(0, '../')
from dataclasses import dataclass
import logging

# 3rd Party Packages
import matplotlib.pyplot as plt
import numpy as np

# Local Packages
import modules.options
import modules.constants as constants
import modules.datahelper as datahelper
import modules.utils as utils
from modules.enums import SaveType
from plotting.modules.plotstyles import PlotStyles, StyleType


_log = logging.getLogger(__name__)


@dataclass
class PlotSettings:
    """
    Settings to control various behaviors of the plot

    Parameters (all Optional):
    * replace_offset_text (bool): If the offset axes text should be put in the axes labels
    * allow_title_runid (bool): If the runid is allowed to appear in the title
    * allow_title_time (bool): If the time is allowed to appear in the title
    * allow_title_rho (bool): If the rho value is allowed to appear in the title
    * allow_title_factor (bool): If the scan factor is allowed to appear in the title
    * invert_y_axis (bool): If the y-axis should be inverted
    * invert_x_axis (bool): If the x-axis should be inverted
    * title_override (str): Overrides auto generated title if non-empty
    * ylabel_override (str): Overrides auto generated ylabel if non-empty
    * xlabel_override (str): Overrides auto generated xlabel if non-empty
    * yaxis_padding (float): The amount to pad the yaxis limits
    * xaxis_padding (float): The amount to pad the xaxis limits
    * xaxis_trim_padding (float): The amount to pad the trimmed xaxis limits when using rho values
    """

    replace_offset_text: bool = True
    allow_title_runid: bool = True
    allow_title_time: bool = True
    allow_title_rho: bool = True
    allow_title_factor: bool = True
    invert_y_axis: bool = False
    invert_x_axis: bool = False
    title_override: str = ''
    ylabel_override: str = ''
    xlabel_override: str = ''
    yaxis_padding: float = 0.005
    xaxis_padding: float = 0
    xaxis_trim_padding: float = 0.015


class PlotData:
    """
    Contains data to be plotted

    This class is meant to be inherited by either PlotDataCdf or PlotDataCsv

    Parameters:
    * options (Options): Object containing user options
    * runid (str): The runid of the CDF
    * yvar (Variable): The Variable object of the y-variable to plot
    * xvar (Variable): The Variable object of the x-variable to plot
    * yval_base (list[float]): The base y-variable value when plotting at a rho point
    * xval_base (list[float]): The base x-variable value when plotting at a rho point
    * transp_calcs (bool): If the data source is using variables calculated in TRANSP (Optional)
    * is_cdf (bool): If the data source is loaded from a CDF (Optional)
    * is_csv (bool): If the data source is loaded from a CSV (Optional)
    * factor_symbol (str | None): The symbol of the scanned variable (Optional)
    * scan_factor (str | None): The scan factor value to plot (Optional)
    * rho_value (str | None): The rho value to plot (Optional)
    * runname (str): A string to replace the runid that shows in plot legends or titles (Optional)
    * legend_override (str): A string to completely replace the legend label of a y-variable (Optional)

    Raises:
    * ValueError: If values for the x-variable or y-variable are None
    """

    def __init__(self, options, runid, yvar, xvar, yval_base=None, xval_base=None, transp_calcs=False, is_cdf=False,
                 is_csv=False, factor_symbol=None, scan_factor=None, rho_value=None, runname='', legend_override=''):
        self.xvals: np.ndarray = self._get_values(xvar.values, options.time_idx)
        self.yvals: np.ndarray = self._get_values(yvar.values, options.time_idx)
        self.xval_base: list[float] = xval_base or []  # plotting an empty list advances the cycler
        self.yval_base: list[float] = yval_base or []
        self.xsymbol: str = xvar.label
        self.ysymbol: str = yvar.label
        self.xunits: str = xvar.units_label
        self.yunits: str = yvar.units_label
        self.xname: str = xvar.name
        self.yname: str = yvar.name
        self.time: str = options.time_str
        self.runid: str = runid
        self.runname: str = runname
        self.rho: str | None = rho_value
        self.factor: str | None = scan_factor
        self.factor_symbol: str | None = factor_symbol
        self.legend_override: str = legend_override
        self.transp_calcs: bool = transp_calcs
        self.is_cdf: bool = is_cdf
        self.is_csv: bool = is_csv

        if self.xvals is None:
            raise ValueError(f'Unable to load values for variable {xvar.name}')
        if self.yvals is None:
            raise ValueError(f'Unable to load values for variable {yvar.name}')

    @staticmethod
    def _get_values(values, time_idx):
        """Returns (np.ndarray): Variable values to be plotted"""
        return values[:, time_idx] if isinstance(values, np.ndarray) and values.ndim == 2 else values

    def get_legend_label(self, legend_attrs):
        """
        Get the y-variable label for the plot legend

        If the legend override is set, then that value is used for the legend
        label.  Otherwise, attributes such as the variable symbol, runid,
        time, rho value, scan factor, calculation source, or data source may
        each be automatically added to the legend.  In general, attributes
        are only added to the legend if multiple plotted variables have
        different values for a given attribute.

        Parameters:
        * legend_attrs (LegendAttributes): Object containing legend attributes

        Returns:
        * (str): The legend label for the variable
        """

        if self.legend_override:
            return self.legend_override

        legend_items = []
        if legend_attrs.show_ysymbol and not legend_attrs.show_xsymbol:
            legend_items.append(self.get_ysymbol_label_str())
        if legend_attrs.show_xsymbol:
            legend_items.append(self.get_xsymbol_label_str())
        if legend_attrs.show_runid or legend_attrs.show_runname:
            legend_items.append(self.get_run_label_str())
        if legend_attrs.show_time:
            legend_items.append(self.get_time_label_str())
        if legend_attrs.show_rho and self.rho is not None:
            legend_items.append(self.get_rho_label_str())
        if legend_attrs.show_factor or legend_attrs.show_factor_symbol:
            legend_items.append(self.get_factor_label_str())
        if legend_attrs.show_calc_source:
            legend_items.append(self.get_calc_source_str())
        if legend_attrs.show_is_cdf and legend_attrs.show_is_csv and not legend_items:
            legend_items.append(self.get_data_source_str())  # only show when legend is empty

        return ' '.join(legend_items)

    def get_ysymbol_label_str(self):
        """Returns (str): The ysymbol string used in the legend label"""
        return self.ysymbol

    def get_xsymbol_label_str(self):
        """Returns (str): The xsymbol string used in the legend label"""
        return fr'{self.ysymbol}$\,$({self.xsymbol})'

    def get_run_label_str(self):
        """Returns (str): The runname or runid string used in the legend label and title details"""
        return self.runname or self.runid

    def get_time_label_str(self):
        """Returns (str): The time string used in the legend label and title details"""
        return f'{self.time}s'

    def get_rho_label_str(self):
        """Returns (str): The rho string used in the legend label and title details"""
        return fr'$\rho = ${self.rho}'

    def get_factor_label_str(self):
        """Returns (str): The factor string used in the legend label and title details"""
        if not self.factor_symbol or self.factor is None:
            return r'$\mathtt{Base}$'
        return fr'${self.factor}\cdot${self.factor_symbol}'

    def get_calc_source_str(self):
        """Returns (str): The data source string used in the legend label"""
        return r'$\mathtt{TRANSP}$' if self.transp_calcs else r'$\mathtt{MMM}$'

    def get_data_source_str(self):
        """Returns (str): The data source string used in the legend label"""
        return r'$\mathtt{CDF}$' if self.is_cdf else r'$\mathtt{CSV}$' if self.is_csv else ''


class PlotDataCdf(PlotData):
    """
    Load data from a CDF to be plotted

    The names of the x-variable and y-variable must match member definitions
    in the InputVariables class.  For example, InputVariables contains the
    member definition 'self.te', corresponding to Electron Temperature, so
    that variable should be referenced using 'te' as the name here.  See
    variables.py for a full list of variables defined in the InputVariables
    class.

    Parameters:
    * runid (str): The runid of the CDF
    * time (float): The time value to plot
    * yname (str): The name of the y-variable to plot
    * xname (str): The name of the x-variable to plot (Optional)
    * runname (str): A string to replace the runid that shows in plot legends or titles (Optional)
    * legend_override (str): A string to completely replace the legend label of a y-variable (Optional)
    * use_cdf_vars (bool): Uses uncalculated CDF variables instead of calculated MMM variables (Optional)
    """

    def __init__(self, runid, time, yname, xname='rho', runname='', legend_override='', transp_calcs=False):
        options = modules.options.Options(runid=runid, input_time=time)
        mmm_vars, cdf_vars, __ = datahelper.initialize_variables(options)
        plot_vars = mmm_vars if not transp_calcs else cdf_vars

        yvar = getattr(plot_vars, yname)
        xvar = getattr(plot_vars, xname)

        super().__init__(options, runid, yvar, xvar, transp_calcs=transp_calcs, is_cdf=True,
                         runname=runname, legend_override=legend_override)


class PlotDataCsv(PlotData):
    """
    Load data from a CSV to be plotted

    The names of the x-variable and y-variable must match member definitions
    in the InputVariables class.  For example, InputVariables contains the
    member definition 'self.te', corresponding to Electron Temperature, so
    that variable should be referenced using 'te' as the name here.  See
    variables.py and controls.py for a full list of InputVariables,
    OutputVariables, and InputControls members that can be referenced by
    name.

    Parameters:
    * runid (str): The runid of the CSV
    * scan_num (int): The scan number of the CSV
    * yname (str): The name of the y-variable to plot
    * xname (str): The name of the x-variable to plot (Optional)
    * scan_factor (float): The scan factor of the CSV to load (Optional)
    * rho_value (float): The rho value of the CSV to load (Optional)
    * runname (str): A string to replace the runid that shows in plot legends or titles (Optional)
    * legend_override (str): A string to completely replace the legend label of a y-variable (Optional)
    """

    def __init__(self, runid, scan_num, yname, xname='rho',
                 scan_factor=None, rho_value=None, runname='', legend_override=''):

        options = modules.options.Options().load(runid, scan_num)
        scan_factor_str = None

        if rho_value:
            rho_value = utils.get_closest_rho(options, SaveType.OUTPUT, rho_value)

        elif scan_factor:
            scan_factor = options.find_scan_factor(scan_factor)
            scan_factor_str = f'{scan_factor:{constants.SCAN_FACTOR_DISPLAY_FMT}}'

        yvar, xvar, factor_symbol = self._get_vars_from_data(options, scan_factor, rho_value, yname, xname)
        yval_base, xval_base = self._get_base_values_from_data(options, rho_value, yname, xname)

        super().__init__(options, runid, yvar, xvar, factor_symbol=factor_symbol, is_csv=True,
                         yval_base=yval_base, xval_base=xval_base,
                         rho_value=rho_value, scan_factor=scan_factor_str,
                         runname=runname, legend_override=legend_override)

    @staticmethod
    def _get_vars_from_data(options, scan_factor, rho_value, yname, xname):
        '''
        Get the x- and y- variables, along with the symbol of the scan factor
        (if applicable)

        Parameters:
        * options (Options): Object containing user options
        * scan_factor (float): The scan factor to load
        * rho_value (str): The rho value to load
        * yname (str): The name of the y-variable to plot
        * xname (str): The name of the x-variable to plot

        Returns:
        * yvar (Variable): The Variable object of the y-variable to plot
        * xvar (Variable): The Variable object of the x-variable to plot
        * factor_symbol (str | None): The symbol of the scanned variable

        Raises:
        * NameError: If xname or yname cannot be found in the data objects
        '''

        yvar = xvar = factor_symbol = None
        adjusted_var = options.get_adjusted_var()
        data_objects = list(datahelper.get_data_objects(options, scan_factor, rho_value))

        for o in data_objects:
            if not yvar and hasattr(o, yname):
                yvar = getattr(o, yname)
            if not xvar and hasattr(o, xname):
                xvar = getattr(o, xname)
            if scan_factor and not factor_symbol and adjusted_var and hasattr(o, adjusted_var):
                factor_symbol = getattr(o, adjusted_var).label

        if not yvar or not xvar:
            raise NameError(
                f'One of the variables "{xname}" or "{yname}" is not specified in '
                f'InputVariables, OutputVariables, or InputControls (typo?)'
            )

        return yvar, xvar, factor_symbol

    @staticmethod
    def _get_base_values_from_data(options, rho_value, yname, xname):
        '''
        Get the base value of the x- and y- variables, when using a rho value

        Parameters:
        * options (Options): Object containing user options
        * rho_value (str): The rho value to load
        * yname (str): The name of the y-variable to plot
        * xname (str): The name of the x-variable to plot

        Returns:
        * yval_base (list[float]): The base value of the y-variable
        * xval_base (list[float]): The base value of the x-variable

        Raises:
        * ValueError: If the rho value cannot be found in the rho folder
        '''

        yval_base = xval_base = None

        if rho_value is not None:
            rho_strs = np.array(utils.get_rho_strings(options, SaveType.OUTPUT), dtype=str)
            base_value_idx_list = np.where(rho_strs == rho_value)[0]

            if not base_value_idx_list:
                raise ValueError(f'The rho value {rho_value} does not match any files saved in the rho folder')

            base_value_idx = base_value_idx_list[0]
            data_objects = list(datahelper.get_data_objects(options))

            for o in data_objects:
                if not yval_base and hasattr(o, yname):
                    yval_base = [getattr(o, yname).values[base_value_idx]]
                if not xval_base and hasattr(o, xname):
                    xval_base = [getattr(o, xname).values[base_value_idx]]

        return yval_base, xval_base


class AllPlotData:
    """
    Store all individual PlotData objects

    Parameters:
    * args (tuple[PlotData]): Contains PlotData objects to store
    """

    def __init__(self, *args):
        self.data: list[PlotData] = [a for a in args if isinstance(a, PlotData)]

    @staticmethod
    def _format_offset_text(offset_text):
        """
        Format the offset text for each axis

        Offset text is generated by MatPlotLib and is usually just the
        exponent '\\times 10^{n}' that can appear for each axis.  This offset
        text can also contain an additive term however, which happens when
        the values being plotted change by a very small amount around a value
        that's not nearly 0.  For example, if values ranged from 2 + 1e-6 to
        2 + 2e-6, then an additive term of +2 would appear in the offset
        text.

        Parameters:
        * offset_text (str): The offset text of the axis

        Returns:
        * (str): The formatted offset text
        """

        if not offset_text:
            return offset_text

        if '+' in offset_text:
            number_str = offset_text.split('+')[1].split('}')[0]
            number = f'{float(number_str):.12g}'
            offset_text = offset_text.replace(number_str, number)

        return f' {offset_text}'

    def get_legend_include(self, attr_name):
        """
        Determine if a legend attribute should be included in the legend

        The rule for adding an attribute to the legend is if multiple plotted
        variables have different values for a checked attribute.  For example, if
        var A and var B both have different runid's, then their runid's are added
        to the legend.  If there is only one variable to plot, then no attributes
        will be added to the legend.

        Parameters:
        * attr_name (str): The name of a LegendAttributes member

        Returns:
        * (bool) True if the attribute should be added to the legend
        """

        attrs = set()
        for pdata in self.data:
            attrs.add(getattr(pdata, attr_name))

        return len(attrs) > 1

    def get_plot_limits(self, plot_settings):
        """
        Get the limits of the plot, adjusted by padding parameters set in plot settings

        The axes limits are adjusted by the percentage given for xpad and ypad
        in the plot settings object, in each direction for either axis.  For
        example, if ypad = 1, then the limits of the yaxis are both increased
        and decreased by 1%.  Note that MatPlotLib uses default padding of
        something like 5% on each axis, so setting padding values smaller
        than this value will produce tighter plots than what would be created
        if the padding wasn't adjusted.

        Parameters:
        * plot_settings (PlotSettings): Plot settings object

        Returns:
        * xlims (tuple[float]): The x-axis limits of the plot
        * ylims (tuple[float]): The y-axis limits of the plot
        """

        def get_lims(minval, maxval, padding, invert_axis):
            """Get the axis limits after applying padding, checking values, and checking axis inversion"""
            if minval < maxval:
                offset = (maxval - minval) * padding
                minval, maxval = minval - offset, maxval + offset
            else:
                minval, maxval = 0, 1  # default values
            return (minval, maxval) if not invert_axis else (maxval, minval)

        all_xvals = np.hstack([d.xvals for d in self.data])
        all_yvals = np.hstack([d.yvals for d in self.data])
        xmin, xmax = all_xvals.min(), all_xvals.max()
        ymin, ymax = all_yvals.min(), all_yvals.max()

        using_rho = (np.array([d.rho for d in self.data]) != None).any()  # '!= None' syntax is needed with numpy

        if using_rho:
            xvals_trim = all_xvals[all_yvals != 0]  # Trim the x-limits of zeros
            xmin_trim, xmax_trim = xvals_trim.min(), xvals_trim.max()
            xoffset_trim = (xmax_trim - xmin_trim) * plot_settings.xaxis_trim_padding
            xmin = max(xmin, xmin_trim - xoffset_trim)  # Keep trimmed xmin >= actual xmin
            xmax = min(xmax, xmax_trim + xoffset_trim)  # Keep trimmed xmax <= actual xmax

        xlims = get_lims(xmin, xmax, plot_settings.xaxis_padding, plot_settings.invert_x_axis)
        ylims = get_lims(ymin, ymax, plot_settings.yaxis_padding, plot_settings.invert_y_axis)

        return xlims, ylims

    def get_plot_title(self, plot_settings, legend_attrs):
        """
        Get the title for the plot

        If the title override is set, then the title override value is used
        for the title of the plot.

        If there is no title override, then a title is generated from the
        intersection of all words in the names of the y-variables being
        plotted.

        Title details are added when all variables share the same value of the
        corresponding attribute.  Possible details are: runid, time, scan
        factor, rho value.

        Parameters:
        * plot_settings (PlotSettings): Plot settings object
        * legend_attrs (LegendAttributes): Legend data object

        Returns:
        * (str): The title for the plot
        """

        base_title = plot_settings.title_override or self._generate_unique_title()
        title_details = self._get_title_details(plot_settings, legend_attrs)

        return f'{base_title}{title_details}'

    def _generate_unique_title(self):
        """
        Generate a title by taking the intersection of all words that appear
        in the name of each y-variable being plotted.

        Example 1:
            name1 = 'Thermal Ion Density'
            name2 = 'Deuterium Ion Density'

            >>> The generated title would be 'Ion Density', since both of
                these words are in each name.

        Example 2:
            name1 = 'Thermal Ion Density'
            name2 = 'Deuterium Ion Density'
            name3 = 'Electron Density'

            >>> The generated title would be 'Density', since this is the only
                word that is in each name.

        Note that the title will be blank if the intersection of all words is
        empty.

        Returns:
        * (str): The unique title for the plot
        """

        unique_ynames = set([data.yname for data in self.data])
        first_name_words = self.data[0].yname.split()
        title_words = []

        # Form list of title words for words that appear in the first y-variable name
        for word in first_name_words:
            append_word = True
            for name in unique_ynames:
                if word not in name:
                    append_word = False
                    break
            if append_word:
                title_words.append(word)

        return ' '.join(title_words)

    def _get_title_details(self, plot_settings, legend_attrs):
        """
        Get the title details

        Details are added to the title if the corresponding title details
        switch is enabled and all variables share the same value for that
        attribute. Possible title details include the runid, time, and rho
        value for each plotted variable.  For example, if all plotted
        variables share the same runid, then the runid is added to the
        title.

        Parameters:
        * plot_settings (PlotSettings): Plot settings object
        * legend_attrs (LegendAttributes): Legend data object

        Returns:
        * (str): The details to add to the title
        """

        title_details_list = []
        allow_runid = plot_settings.allow_title_runid
        allow_time = plot_settings.allow_title_time
        allow_rho = plot_settings.allow_title_rho
        allow_factor = plot_settings.allow_title_factor

        if allow_runid or allow_time or allow_rho:
            var = self.data[0]  # use first variable values for title details (same for all variables)

            if allow_runid and not (legend_attrs.show_runid or legend_attrs.show_runname):
                # all lines have same runid or runname
                title_details_list.append(var.get_run_label_str())
            if allow_time and not legend_attrs.show_time:
                # all lines have same time
                title_details_list.append(var.get_time_label_str())
            if allow_rho and not legend_attrs.show_rho and var.rho is not None:
                # all lines have same rho, and rho is not None
                title_details_list.append(var.get_rho_label_str())
            if allow_factor and not legend_attrs.show_factor and var.factor is not None:
                title_details_list.append(var.get_factor_label_str())

        return f' ({", ".join(title_details_list)})' if title_details_list else ''

    def get_plot_ylabel(self, plot_settings, legend_attrs, offset_text):
        """
        Get the yaxis label for the plot

        If the ylabel override is set, then that is used for the ylabel of the
        plot.  Otherwise, the unique units of each y-variable are added to the
        ylabel (the same units aren't repeated).  Additionally, if the y-variable
        symbols do not appear in the legend, then these unique symbols are also
        added to the ylabel.

        Parameters:
        * plot_settings (PlotSettings): Plot settings object
        * legend_attrs (LegendAttributes): Legend data object
        * offset_text (str): The offset text from the y-axis of the plot

        Returns:
        * (str): The ylabel for the plot
        """

        offset_text = self._format_offset_text(offset_text)

        if plot_settings.ylabel_override:
            return f'{plot_settings.ylabel_override}{offset_text}'

        ylabels = []  # Not using a set to preserve order
        for d in self.data:
            if not legend_attrs.show_ysymbol and not legend_attrs.show_xsymbol:  # ysymbol is not in the legend
                ystr = f'{d.ysymbol} {d.yunits}'
                if ystr not in ylabels:
                    ylabels.append(ystr)
            elif d.yunits not in ylabels:  # ysymbol is in the legend
                ylabels.append(d.yunits)

        joined_labels = r'$\!$,  '.join(ylabels)  # small negative space before each comma
        return f'{joined_labels}{offset_text}'

    def get_plot_xlabel(self, plot_settings, legend_attrs, offset_text):
        """
        Get the xaxis label for the plot

        If the xlabel override is set, then that is used for the xlabel of the
        plot.  Otherwise, the unique symbols and units of each x-variable are
        added to the ylabel (the same units aren't repeated).

        Parameters:
        * plot_settings (PlotSettings): Plot settings object
        * legend_attrs (LegendAttributes): Legend data object
        * offset_text (str): The offset text from the x-axis of the plot

        Returns:
        * (str): The xlabel for the plot
        """

        offset_text = self._format_offset_text(offset_text)

        if plot_settings.xlabel_override:
            return f'{plot_settings.xlabel_override}{offset_text}'

        xlabels = []  # Not using a set to preserve order
        for d in self.data:
            xstr = f'{d.xsymbol} {d.xunits}'
            if xstr not in xlabels:
                xlabels.append(xstr)

        joined_labels = r'$\!$,  '.join(xlabels)  # small negative space before each comma
        return f'{joined_labels}{offset_text}'


class LegendAttributes:
    """
    Store a bool for whether each attribute should appear in the legend

    Parameters:
    * show_ysymbol (bool): True if the y-variable symbol should be shown in the legend
    * show_xsymbol (bool): True if the x-variable symbol should be shown in the legend
    * show_runid (bool): True if the runid should be shown in the legend
    * show_runname (bool): True if the runname should be shown in the legend
    * show_time (bool): True if the time value should be shown in the legend
    * show_rho (bool): True if the rho value should be shown in the legend
    * show_factor (bool): True if the scan factor should be shown in the legend
    * show_calc_source (bool): True if the calculation source should be shown in the legend
    * show_override (bool): True if legend overrides have been specified
    * show_is_cdf (bool): True if the source should be shown as CDF in the legend
    * show_is_csv (bool): True if the source should be shown as CSV in the legend
    """

    def __init__(self, show_ysymbol, show_xsymbol, show_runid, show_runname, show_time, show_rho,
                 show_factor, show_factor_symbol, show_calc_source, show_override,
                 show_is_cdf, show_is_csv):
        self.show_ysymbol: bool = show_ysymbol
        self.show_xsymbol: bool = show_xsymbol
        self.show_runid: bool = show_runid
        self.show_runname: bool = show_runname
        self.show_time: bool = show_time
        self.show_rho: bool = show_rho
        self.show_factor: bool = show_factor
        self.show_factor_symbol: bool = show_factor_symbol
        self.show_calc_source: bool = show_calc_source
        self.show_override: bool = show_override
        self.show_is_cdf: bool = show_is_cdf
        self.show_is_csv: bool = show_is_csv

    def show_legend(self):
        """Returns (bool): True if the legend should be shown"""

        show_legend = False
        attributes = self.get_attributes()
        for a in attributes:
            if getattr(self, a):
                show_legend = True
                break
        return show_legend

    def get_attributes(self):
        """Returns (list[str]): all boolean legend attributes"""
        return [a for a in dir(self) if isinstance(getattr(self, a), bool)]


def main(plot_settings, all_data):
    """
    Create a plot using data loaded from CDF files

    This method advances the plot cycler twice for each variable in
    AllPlotData, by plotting twice for each variable.  The first plot is a
    line of the normal data for the variable, and the second plot is a single
    point of the base value for the previously plotted line.  When a variable
    contains no base values, as is the case when not plotting a specific
    point of rho, then empty lists are plotted; this allows us to advance the
    cycler without adding anything to the plot, as no methods exist for us to
    directly increment the cycler.

    The cycler for this plotting loop

    Parameters:
    * plot_settings (PlotSettings): Object containing plot settings
    * all_data (AllPlotData): Object containing all PlotData objects
    """

    ax = plt.gca()

    legend_attrs = LegendAttributes(
        show_ysymbol=all_data.get_legend_include('ysymbol'),
        show_xsymbol=all_data.get_legend_include('xsymbol'),
        show_runid=all_data.get_legend_include('runid'),
        show_runname=all_data.get_legend_include('runname'),
        show_time=all_data.get_legend_include('time'),
        show_rho=all_data.get_legend_include('rho'),
        show_factor=all_data.get_legend_include('factor'),
        show_factor_symbol=all_data.get_legend_include('factor_symbol'),
        show_is_cdf=all_data.get_legend_include('is_cdf'),
        show_is_csv=all_data.get_legend_include('is_csv'),
        show_calc_source=all_data.get_legend_include('transp_calcs'),
        show_override=all_data.get_legend_include('legend_override')
    )

    for d in all_data.data:
        ax.plot(d.xvals, d.yvals, label=d.get_legend_label(legend_attrs))
        ax.plot(d.xval_base, d.yval_base)  # Advance the cycler when base values are empty lists

    xlims, ylims = all_data.get_plot_limits(plot_settings)

    ax.set(xlim=xlims, ylim=ylims)

    offset_text_x = offset_text_y = ''
    if plot_settings.replace_offset_text:
        plt.gcf().canvas.draw()  # needed to grab offsetText string
        ax.xaxis.offsetText.set_visible(False)
        ax.yaxis.offsetText.set_visible(False)
        offset_text_x = ax.xaxis.offsetText.get_text()
        offset_text_y = ax.yaxis.offsetText.get_text()

    ax.set(
        title=all_data.get_plot_title(plot_settings, legend_attrs),
        xlabel=all_data.get_plot_xlabel(plot_settings, legend_attrs, offset_text_x),
        ylabel=all_data.get_plot_ylabel(plot_settings, legend_attrs, offset_text_y),
    )

    if legend_attrs.show_legend():
        ax.legend().set_draggable(state=True)

    plt.show()


if __name__ == '__main__':
    """
    Run this module directly to plot variable data stored in CDF files.
    AllPlotData can contain both plot data from a CDF (PlotDataCdf) and from
    a CSV (PlotDataCsv).
    """

    utils.init_logging()

    # Define visual styles for the plot
    PlotStyles(
        axes=StyleType.Axes.GRAY,
        lines=StyleType.Lines.RHO_MMM,
        layout=StyleType.Layout.SINGLE,
    )

    # Define settings for the plot
    plot_settings = PlotSettings(
        allow_title_factor=True,
        allow_title_runid=True,
        allow_title_time=True,
        allow_title_rho=True,
        invert_y_axis=False,
        invert_x_axis=False,
        title_override='',
        ylabel_override='',
        xlabel_override='',
    )

    # Define data for the plot
    all_data = AllPlotData(
        # CDF: Same y-variable, different x-variables
        # PlotDataCdf(runid='138536A01', yname='te', xname='rho', time=0.50),
        # PlotDataCdf(runid='138536A01', yname='te', xname='xb', time=0.50),
        # CDF: Different y-variable units
        # PlotDataCdf(runid='138536A01', yname='te', xname='rho', time=0.50),
        # PlotDataCdf(runid='138536A01', yname='ti', xname='rho', time=0.50),
        # PlotDataCdf(runid='138536A01', yname='btor', xname='rho', time=0.50),
        # CDF: Different runid, y-variables, and times
        # PlotDataCdf(runid='120982A09', yname='ne', xname='rho', time=0.60),
        # PlotDataCdf(runid='120968A02', yname='ni', xname='rho', time=0.50),
        # PlotDataCdf(runid='129041A10', yname='nd', xname='rho', time=0.40),
        # CDF: Compare TRANSP and MMM calculations (must be defined in calculations.py)
        # PlotDataCdf(runid='138536A01', yname='ne', xname='rho', time=0.629, transp_calcs=True),
        # PlotDataCdf(runid='138536A01', yname='etae', xname='rho', time=0.629),
        # CDF and CSV: Compare same variable from different data sources
        # PlotDataCdf(runid='138536A01', yname='ne', xname='rho', time=0.629),
        # PlotDataCsv(runid='138536A01', yname='ne', xname='rho', scan_num=2),
        # CSV: Different scanned variables with same scan factor
        # PlotDataCsv(runid='138536A01', yname='ne', xname='rho', scan_num=1, scan_factor=2.5),
        # PlotDataCsv(runid='138536A01', yname='ne', xname='rho', scan_num=2, scan_factor=2.5),
        # PlotDataCsv(runid='138536A01', yname='ne', xname='rho', scan_num=5, scan_factor=2.5),
        # CSV: Different output variables
        # PlotDataCsv(runid='138536A01', yname='gmaETGM', xname='rho', scan_num=2),
        # PlotDataCsv(runid='138536A01', yname='omgETGM', xname='rho', scan_num=2),
        # CSV: Growth rate vs Effective Charge
        # PlotDataCsv(runid='138536A01', yname='gmaETGM', xname='zeff', scan_num=4, rho_value=0.15),
        # PlotDataCsv(runid='138536A01', yname='gmaETGM', xname='zeff', scan_num=4, rho_value=0.31),
        # PlotDataCsv(runid='138536A01', yname='gmaETGM', xname='zeff', scan_num=4, rho_value=0.63),
        # CSV: Growth rate vs Average Magnetic Surface Curvature
        PlotDataCsv(runid='138536A01', yname='gmaETGM', xname='gave', scan_num=4, rho_value=0.15),
        PlotDataCsv(runid='138536A01', yname='gmaETGM', xname='gave', scan_num=4, rho_value=0.31),
        PlotDataCsv(runid='138536A01', yname='gmaETGM', xname='gave', scan_num=4, rho_value=0.63),
    )

    main(plot_settings, all_data)
