#!/usr/bin/python3

"""Creates single plots of data stored in CDFs or CSVs

This module aims to quickly produce publication quality plots using data
stored in CDF files generated by TRANSP, or CSV files generated by MMM
Explorer.  Various rules have been written that automate the majority of the
plotting process, including exactly what data appears in the title, labels,
and legend.  The user may override any of these rules by specifying their
corresponding parameters in the PlotSettings class.

Variable data loaded from a CDF or CSV is stored using the Variable class
within the either the InputVariables or OutputVariables, where variable
attributes such as label names and symbols are defined here.  Additionally,
the InputControls class also stores data in CSVs pertaining to control
values.  This means that a new Variable object needs to be created in
variables.py if the user wishes to plot any variables not already declared in
either InputVariables or OutputVariables.  Likewise, new Control objects will
need to be created in controls.py if needed.

Examples of how to use this module has been provided at the bottom of this
file, but please refer to both the PlotSettings and PlotData classes for a
full list of parameters that can be specified when creating plots.
"""

# Standard Packages
import sys; sys.path.insert(0, '../')
import logging
import io

# 3rd Party Packages
import matplotlib.pyplot as plt
import numpy as np
from PyQt5.QtGui import QImage
from PyQt5.QtWidgets import QApplication

# Local Packages
import modules.options
import modules.constants as constants
import modules.datahelper as datahelper
import modules.utils as utils
from modules.enums import SaveType
from plotting.modules.plotstyles import PlotStyles, StyleType


_log = logging.getLogger(__name__)


class PlotData:
    """
    Contains data to be plotted

    This class is meant to be inherited by either PlotDataCdf or PlotDataCsv

    Parameters:
    * options (Options): Object containing user options
    * runid (str): The runid of the CDF
    * yname (str): The name of the y-variable to plot
    * xname (str): The name of the x-variable to plot
    * yvar (Variable): The Variable object of the y-variable to plot
    * xvar (Variable): The Variable object of the x-variable to plot
    * zidx (int):
    * timeplot (bool):
    * yval_base (list[float]): The base y-variable value when plotting at a rho point (Optional)
    * xval_base (list[float]): The base x-variable value when plotting at a rho point (Optional)
    * xmult (float): Multiplier to apply to the xvar values (Optional)
    * ymult (float): Multiplier to apply to the yvar values (Optional)
    * source (str): The data source = 'mmm', 'cdf', 'raw' (Optional)
    * is_cdf (bool): If the data source is loaded from a CDF (Optional)
    * is_csv (bool): If the data source is loaded from a CSV (Optional)
    * factor_symbol (str | None): The symbol of the scanned variable (Optional)
    * scan_factor (str | None): The scan factor value to plot (Optional)
    * rho_value (str | None): The rho value to plot (Optional)
    * runname (str): A string to replace the runid that shows in plot legends or titles (Optional)
    * legend (str): A string to replace the auto generated legend label of a y-variable (Optional)

    Raises:
    * ValueError: If values for the x-variable or y-variable are None
    """

    def __init__(self, options, runid, yname, xname, yvar, xvar, zidx, zval,
                 timeplot=False, yval_base=None, xval_base=None, source='mmm',
                 is_cdf=False, is_csv=False, factor_symbol=None, scan_factor=None,
                 ymult=1, xmult=1, rho_value=None, runname=None, legend=''):

        self.options = options
        self.timeplot = timeplot
        self.xmult: float = xmult
        self.ymult: float = ymult
        self.xvals: np.ndarray = self._get_values(xvar, zidx) * xmult
        self.yvals: np.ndarray = self._get_values(yvar, zidx) * ymult
        self.xval_base: list[float] = xval_base or []  # plotting an empty list advances the cycler
        self.yval_base: list[float] = yval_base or []
        self.xsymbol: str = xvar.label
        self.ysymbol: str = yvar.label
        self.xunits: str = xvar.units_label
        self.yunits: str = yvar.units_label
        self.xvarname: str = xvar.name
        self.yvarname: str = yvar.name
        self.xname: str = xname
        self.yname: str = yname
        self.time: str = options.time_str
        self.zval: float = zval
        self.runid: str = runid
        self.runname: str | None = runname
        self.rho: str | None = rho_value
        self.factor: str | None = scan_factor
        self.factor_symbol: str | None = factor_symbol
        self.legend: str = legend
        self.source: str = source
        self.is_cdf: bool = is_cdf
        self.is_csv: bool = is_csv
        self.scan_range = options.scan_range

        # self.xvals = np.absolute(self.xvals)
        # self.xval_base = [abs(b) for b in self.xval_base]

        if self.xvals is None:
            raise ValueError(f'Unable to load values for variable {xvar.name}')
        if self.yvals is None:
            raise ValueError(f'Unable to load values for variable {yvar.name}')

    def _get_values(self, var, zidx):
        """Returns (np.ndarray): Variable values to be plotted"""
        if not self.timeplot:
            values = var.values[:, zidx] if isinstance(var.values, np.ndarray) and var.values.ndim == 2 else var.values
        else:
            values = var.values[zidx, :] if isinstance(var.values, np.ndarray) and var.values.ndim == 2 else var.values

        if values is None:
            raise ValueError(f'Null values detected for variable name {var.name}')
        return values

    def get_ysymbol_label_str(self):
        """Returns (str): The ysymbol string used in the legend label"""
        return self.ysymbol

    def get_xsymbol_label_str(self):
        """Returns (str): The xsymbol string used in the legend label"""
        return fr'{self.ysymbol}$\,$({self.xsymbol})'

    def get_run_label_str(self):
        """Returns (str): The runname or runid string used in the legend label and title details"""
        return self.runname if self.runname is not None else self.runid

    def get_time_label_str(self):
        """Returns (str): The time string used in the legend label and title details"""
        return f'{self.time}s' if self.time else ''

    def get_rho_label_str(self):
        """Returns (str): The rho string used in the legend label and title details"""
        return fr'$\hat{{\rho}} = ${self.rho}'

    def get_factor_label_str(self):
        """Returns (str): The factor string used in the legend label and title details"""
        no_factor = not self.factor_symbol or self.factor is None
        return r'$\mathtt{Base}$' if no_factor else fr'${self.factor}\cdot${self.factor_symbol}'

    def get_calc_source_str(self):
        """Returns (str): The data source string used in the legend label"""
        # return r'$\mathtt{TRANSP}$' if self.source != 'mmm' else r'$\mathtt{MMM}$'
        # return r'$\mathtt{TRANSP}$' if self.source != 'mmm' else 'Expected'
        return ''

    def get_data_source_str(self):
        """Returns (str): The data source string used in the legend label"""
        return r'$\mathtt{CDF}$' if self.is_cdf else r'$\mathtt{CSV}$' if self.is_csv else ''

    def get_zval_str(self):
        """Returns (str): The zval string used in the legend label"""
        return fr'{self.zval}s' if not self.timeplot else fr'$\rho = {self.zval}$'


class PlotDataCdf(PlotData):
    """
    Load data from a CDF to be plotted

    The names of the x-variable and y-variable must match member definitions
    in the InputVariables class.  For example, InputVariables contains the
    member definition 'self.te', corresponding to Electron Temperature, so
    that variable should be referenced using 'te' as the name here.  See
    variables.py for a full list of variables defined in the InputVariables
    class.

    Parameters:
    * runid (str): The runid of the CDF
    * zval (float): The time or rho value to plot
    * yname (str): The name of the y-variable to plot
    * xname (str): The name of the x-variable to plot (Optional)
    * timeplot (bool): True if plotting time on the x-axis (Optional)
    * xmult (float): Multiplier to apply to the xvar values (Optional)
    * ymult (float): Multiplier to apply to the yvar values (Optional)
    * runname (str): A string to replace the runid that shows in plot legends or titles (Optional)
    * legend (str): A string to replace the auto generated legend label of a y-variable (Optional)
    * source (str): The data source = 'mmm', 'cdf', 'raw' (Optional)
    * input_points (int): the amount of radial points each variable is interpolated to when sent to MMM (Optional)
    * apply_smoothing (bool): kill-switch to disable smoothing of all variables (Optional)
    """

    def __init__(self, runid, yname, xname='rho', zval=0, timeplot=False, runname='', legend='', source='mmm',
                 input_points=None, apply_smoothing=False, ymult=1, xmult=1):

        if xname == 'time':
            timeplot = True

        input_time = zval if not timeplot else None

        options = modules.options.Options(
            runid=runid, input_time=input_time, input_points=input_points,
            ignore_exceptions=True, apply_smoothing=apply_smoothing
        )
        mmm_vars, cdf_vars, raw_vars = datahelper.initialize_variables(options)

        if source == 'mmm':
            plot_vars = mmm_vars
        elif source == 'cdf':
            plot_vars = cdf_vars
        elif source == 'raw':
            plot_vars = raw_vars
        else:
            raise ValueError(f'{source} is not a valid source value (use source = mmm, cdf, or raw)')

        yvar = getattr(plot_vars, yname)
        xvar = getattr(plot_vars, xname)

        # Get the zidx (index of the time or rho value)
        if timeplot:
            zidx = np.argmin(np.abs(plot_vars.rho.values[:, 0] - zval))
            zval = plot_vars.rho.values[zidx, 0]
        else:
            zidx = options.time_idx
            zval = options.time_str

        super().__init__(
            options, runid, yname, xname, yvar, xvar, zidx, zval,
            timeplot=timeplot, source=source, is_cdf=True,
            runname=runname, legend=legend, ymult=ymult, xmult=xmult
        )


class PlotDataCsv(PlotData):
    """
    Load data from a CSV to be plotted

    The names of the x-variable and y-variable must match member definitions
    in the InputVariables class.  For example, InputVariables contains the
    member definition 'self.te', corresponding to Electron Temperature, so
    that variable should be referenced using 'te' as the name here.  See
    variables.py and controls.py for a full list of InputVariables,
    OutputVariables, and InputControls members that can be referenced by
    name.

    Parameters:
    * runid (str): The runid of the CSV
    * scan_num (int): The scan number of the CSV
    * yname (str): The name of the y-variable to plot
    * xname (str): The name of the x-variable to plot (Optional)
    * timeplot (bool): True if plotting time on the x-axis (Optional)
    * xmult (float): Multiplier to apply to the xvar values (Optional)
    * ymult (float): Multiplier to apply to the yvar values (Optional)
    * scan_factor (float): The scan factor of the CSV to load (Optional)
    * rho_value (float): The rho value of the CSV to load (Optional)
    * runname (str): A string to replace the runid that shows in plot legends or titles (Optional)
    * legend (str): A string to replace the auto generated legend label of a y-variable (Optional)
    """

    def __init__(self, runid, scan_num, yname, xname='rho', ymult=1, xmult=1,
                 scan_factor=None, rho_value=None, runname='', legend=''):

        options = modules.options.Options().load(runid, scan_num)
        scan_factor_str = None

        timeplot = True if options.var_to_scan == 'time' and xname == 'time' else False

        if xname == 'var_to_scan':
            xname = options.var_to_scan

        rho_str = None
        if rho_value is not None:
            rho_str = utils.get_closest_rho(options, SaveType.OUTPUT, rho_value) if rho_value is not None else ''

        elif scan_factor:
            scan_factor = options.find_scan_factor(scan_factor)
            scan_factor_str = f'{scan_factor:{constants.SCAN_FACTOR_DISPLAY_FMT}}'

        yvar, xvar, factor_symbol = self._get_vars_from_data(options, scan_factor, rho_str, yname, xname)
        yval_base, xval_base = self._get_base_values_from_data(options, rho_str, yname, xname)

        # Get the zidx (index of the time or rho value)
        if timeplot:
            zidx = np.argmin(np.abs(options.scan_range - rho_value))
            zval = rho_value
        else:
            zidx = options.time_idx
            zval = options.time_str

        super().__init__(
            options, runid, yname, xname, yvar, xvar, zidx, zval,
            timeplot=timeplot, factor_symbol=factor_symbol, is_csv=True,
            yval_base=yval_base, xval_base=xval_base, rho_value=rho_str,
            scan_factor=scan_factor_str, runname=runname, legend=legend,
            ymult=ymult, xmult=xmult
        )

    @staticmethod
    def _get_vars_from_data(options, scan_factor, rho_value, yname, xname):
        """
        Get the x- and y- variables, along with the symbol of the scan factor
        (if applicable)

        Parameters:
        * options (Options): Object containing user options
        * scan_factor (float): The scan factor to load
        * rho_value (str): The rho value to load
        * yname (str): The name of the y-variable to plot
        * xname (str): The name of the x-variable to plot

        Returns:
        * yvar (Variable): The Variable object of the y-variable to plot
        * xvar (Variable): The Variable object of the x-variable to plot
        * factor_symbol (str | None): The symbol of the scanned variable

        Raises:
        * NameError: If xname or yname cannot be found in the data objects
        """

        yvar = xvar = factor_symbol = None
        adjusted_var = options.var_to_scan
        ivars, ovars, ctrls = datahelper.get_data_objects(options, scan_factor, rho_value)
        data_objects = [ovars, ivars, ctrls]

        for o in data_objects:
            if not yvar and hasattr(o, yname):
                yvar = getattr(o, yname)
            if not xvar and hasattr(o, xname):
                xvar = getattr(o, xname)
            if scan_factor and not factor_symbol and adjusted_var and hasattr(o, adjusted_var):
                factor_symbol = getattr(o, adjusted_var).label

        if not yvar or not xvar:
            raise NameError(
                f'One of the variables "{xname}" or "{yname}" is not specified in '
                f'InputVariables, OutputVariables, or InputControls (typo?)'
            )

        return yvar, xvar, factor_symbol

    @staticmethod
    def _get_base_values_from_data(options, rho_value, yname, xname):
        """
        Get the base value of the x- and y- variables, when using a rho value

        Parameters:
        * options (Options): Object containing user options
        * rho_value (str): The rho value to load
        * yname (str): The name of the y-variable to plot
        * xname (str): The name of the x-variable to plot

        Returns:
        * yval_base (list[float]): The base value of the y-variable
        * xval_base (list[float]): The base value of the x-variable

        Raises:
        * ValueError: If the rho value cannot be found in the rho folder
        """

        yval_base = xval_base = None

        if rho_value is not None:
            rho_strs = np.array(utils.get_rho_strings(options, SaveType.OUTPUT), dtype=str)
            base_value_idx_list = np.where(rho_strs == rho_value)

            if not len(base_value_idx_list):
                raise ValueError(
                    f'The rho value {rho_value} does not match any files saved in the rho folder'
                    f'\n\tAvailable files:'
                    f'\n\t{rho_strs}'
                )

            base_value_idx = base_value_idx_list[0][0]
            data_objects = list(datahelper.get_data_objects(options))

            for o in data_objects:
                if not yval_base and hasattr(o, yname):
                    yval_base = [getattr(o, yname).values[base_value_idx]]
                if not xval_base and hasattr(o, xname):
                    values = getattr(o, xname).values
                    xval_base = [values[base_value_idx] if isinstance(values, np.ndarray) else values]

        return yval_base, xval_base


class FigData:
    """
    Store all individual PlotData objects on the figure

    Initialization parameters determine plot settings and must be specified as
    keyword arguments.  Plot data is set in a separate call using the set()
    method.

    Parameters (all optional keyword arguments):
    * replace_offset_text (bool): If the offset axes text should be put in the axes labels
    * allow_title_name (bool): If the variable name is allowed to appear in the title
    * allow_title_runid (bool): If the runid is allowed to appear in the title
    * allow_title_time (bool): If the time is allowed to appear in the title
    * allow_title_rho (bool): If the rho value is allowed to appear in the title
    * allow_title_factor (bool): If the scan factor is allowed to appear in the title
    * invert_y_axis (bool): If the y-axis should be inverted
    * invert_x_axis (bool): If the x-axis should be inverted
    * nomralize_y_axis (bool): If the y-axis should be normalized
    * normalize_x_axis (bool): If the x-axis should be normalized
    * savename_append (str): Name to append to the saved file when autosaving
    * summed_modes (bool): If the modes were summed (generally applies to diffusivity)
    * title_override (str): Overrides auto generated title if non-empty
    * ylabel_override (str): Overrides auto generated ylabel if non-empty
    * xlabel_override (str): Overrides auto generated xlabel if non-empty
    * yaxis_padding (float): The amount to pad the yaxis limits
    * xaxis_padding (float): The amount to pad the xaxis limits
    * xaxis_trim_padding (float): The amount to pad the trimmed xaxis limits when using rho values
    * ymin (float | None): The minimum y-value to use
    * ymax (float | None): The maximum y-value to use
    * xmin (float | None): The minimum x-value to use
    * xmax (float | None): The maximum x-value to use
    * ymin_cutoff (float | None): The minimum cutoff y-value to use
    * ymax_cutoff (float | None): The maximum cutoff y-value to use
    * xmin_cutoff (float | None): The minimum cutoff x-value to use
    * xmax_cutoff (float | None): The maximum cutoff x-value to use
    * xticks (np.arange[float] | None): The tick marks on the x-axis
    * yticks (np.arange[float] | None): The tick marks on the y-axis
    * savefig (bool): Automatically save the plot without showing it if True
    * savedata (bool): Automatically save the data as a CSV
    """

    def __init__(self, **kwargs):
        self.replace_offset_text: bool = True
        self.allow_title_name: bool = True
        self.allow_title_runid: bool = True
        self.allow_title_time: bool = True
        self.allow_title_rho: bool = True
        self.allow_title_factor: bool = True
        self.invert_y_axis: bool = False
        self.invert_x_axis: bool = False
        self.nomralize_y_axis: bool = False
        self.nomralize_x_axis: bool = False
        self.savename_append: str = ''
        self.summed_modes: bool = False
        self.title_override: str = ''
        self.ylabel_override: str = ''
        self.xlabel_override: str = ''
        self.yaxis_padding: float = 0.01
        self.xaxis_padding: float = 0.005
        self.xaxis_trim_padding: float = 0.03
        self.ymin: float | None = None
        self.ymax: float | None = None
        self.xmin: float | None = None
        self.xmax: float | None = None
        self.ymin_cutoff: float | None = None
        self.ymax_cutoff: float | None = None
        self.xmin_cutoff: float | None = None
        self.xmax_cutoff: float | None = None
        self.xticks: list[float] | None = None
        self.yticks: list[float] | None = None
        self.savefig: bool = False
        self.savedata: bool = False

        self._set_kwargs(kwargs)

        # Set these after kwargs are set
        self.data = None
        self.legend_attrs = None
        self.show_legend = None
        self.contains_timeplot = False

    def set(self, *args, **kwargs):
        """
        Set data for the plot

        Parameters:
        * args (tuple[PlotData]): Data to be plotted
        """

        self._set_kwargs(kwargs)
        self.data: list[PlotData] = [a for a in args if isinstance(a, PlotData)]

        if self.nomralize_y_axis:
            for d in self.data:
                if min(d.yvals) != max(d.yvals):
                    d.yval_base = (d.yval_base - min(d.yvals)) / (max(d.yvals) - min(d.yvals))
                    d.yvals = (d.yvals - min(d.yvals)) / (max(d.yvals) - min(d.yvals))
                else:
                    d.yval_base = 0
                    d.yvals[:] = 0

        if self.nomralize_x_axis:
            for d in self.data:
                if min(d.xvals) != max(d.xvals):
                    d.xval_base = (d.xval_base - min(d.xvals)) / (max(d.xvals) - min(d.xvals))
                    d.xvals = (d.xvals - min(d.xvals)) / (max(d.xvals) - min(d.xvals))
                else:
                    d.xval_base = 0
                    d.xvals[:] = 0

        if self.summed_modes:  # TODO: replace with controls check
            for d in self.data:
                if '\chi' in d.ysymbol:
                    stripped_label = d.ysymbol.strip('$')
                    d.ysymbol = f'$_{{^\sum}}{stripped_label}$'

        self._init_legend_dict()
        self._update_rho_str()

    @staticmethod
    def _format_offset_text(offset_text):
        """
        Format the offset text for each axis

        Offset text is generated by MatPlotLib and is usually just the
        exponent '\\times 10^{n}' that can appear for each axis.  This offset
        text can also contain an additive term however, which happens when
        the values being plotted change by a very small amount around a value
        that's not nearly 0.  For example, if values ranged from 2 + 1e-6 to
        2 + 2e-6, then an additive term of +2 would appear in the offset
        text.

        Parameters:
        * offset_text (str): The offset text of the axis

        Returns:
        * (str): The formatted offset text
        """

        if not offset_text:
            return offset_text

        if '+' in offset_text:
            number_str = offset_text.split('+')[1].split('}')[0]
            number = f'{float(number_str):.12g}'
            offset_text = offset_text.replace(number_str, number)

        return f' {offset_text}'

    def _init_legend_dict(self):
        """Store whether each attribute should be shown in the legend"""
        self.legend_attrs: dict[str, bool] = {
            'show_ysymbol': self.get_legend_include('ysymbol'),
            'show_xsymbol': self.get_legend_include('xsymbol'),
            'show_runid': self.get_legend_include('runid'),
            'show_runname': self.get_legend_include('runname'),
            'show_time': self.get_legend_include('time'),
            'show_rho': self.get_legend_include('rho'),
            'show_factor': self.get_legend_include('factor'),
            'show_factor_symbol': self.get_legend_include('factor_symbol'),
            'show_is_cdf': self.get_legend_include('is_cdf'),
            'show_is_csv': self.get_legend_include('is_csv'),
            'show_calc_source': self.get_legend_include('source'),
            'show_override': self.get_legend_include('legend'),
            'show_zval': self.get_legend_include('zval'),
        }

        self.show_legend: bool = np.array([v for v in self.legend_attrs.values()]).any()
        self.contains_timeplot: bool = np.array([d.timeplot for d in self.data]).any()

    def _update_rho_str(self):
        """
        Update rho strings so that trailing zeros are removed while the same
        number of decimal points are kept for each rho value.

        Example:

            rho1, rho2 = 0.900, 0.720

            >>> rho1, rho2 = 0.90, 0.72
        """

        # Get the max number of decimal points used for all rho
        rho_lengths = [0]  # Fill with 0 so that the list isn't empty when calling max()
        for d in self.data:
            if d.rho:
                split_decimal = f'{float(d.rho):.12g}'.split('.')
                if len(split_decimal) > 1:
                    rho_lengths.append(len(split_decimal[1]))  # num decimal points with trailing 0's removed

        rho_length = max(rho_lengths)

        # Update rho strings by removing trailing 0's while keeping the same amount of decimals on each rho
        if rho_length:
            for i, d in enumerate(self.data):
                if d.rho:
                    d.rho = f'{float(d.rho):.{rho_length}f}'

    def _set_kwargs(self, kwargs):
        """Set member values using keyword arguments"""
        for key, value in kwargs.items():
            if hasattr(self, key):
                setattr(self, key, value)
            else:
                _log.error(f'\n\t"{key}" is not a valid parameter for FigData')

    @staticmethod
    def _get_units_str(units):
        """Returns (str) The formatted units of the variable"""
        # Note: The units parameter may already contain '$' symbols, which
        # breaks the \left and \right commands we are using, so those symbols
        # are removed and placed back in at the ends of the return string
        return "".join([r"$", fr'\left(\mathrm{{{units}}}\right)'.replace('$', ''), r"$"]) if units else ''

    def get_legend_label(self, plotdata):
        """
        Get the individual label for the plot legend

        Since the rules for constructing legend labels depend on the loaded
        data as a whole, a PlotData object needing a legend label is passed
        into here first, before having it's own label methods called.

        If the legend override is set, then that value is used for the legend
        label.  Otherwise, attributes such as the variable symbol, runid,
        time, rho value, scan factor, calculation source, or data source may
        each be automatically added to the legend.  In general, attributes
        are only added to the legend if multiple plotted variables have
        different values for a given attribute.

        Parameters:
        * plotdata (PlotData): Object containing plot data

        Returns:
        * (str): The legend label for the variable
        """

        if plotdata.legend:
            return plotdata.legend

        legend_items = []
        if self.legend_attrs['show_ysymbol'] and not self.legend_attrs['show_xsymbol']:
            legend_items.append(plotdata.get_ysymbol_label_str())
        if self.legend_attrs['show_xsymbol']:
            legend_items.append(plotdata.get_xsymbol_label_str())
        if self.legend_attrs['show_runid'] or self.legend_attrs['show_runname']:
            legend_items.append(plotdata.get_run_label_str())
        if self.legend_attrs['show_time']:
            legend_items.append(plotdata.get_time_label_str())
        if self.legend_attrs['show_rho'] and plotdata.rho is not None:
            legend_items.append(plotdata.get_rho_label_str())
        if self.legend_attrs['show_factor'] or self.legend_attrs['show_factor_symbol']:
            legend_items.append(plotdata.get_factor_label_str())
        if self.legend_attrs['show_calc_source']:
            legend_items.append(plotdata.get_calc_source_str())
        if self.contains_timeplot and self.legend_attrs['show_zval']:
            legend_items.append(plotdata.get_zval_str())
        if self.legend_attrs['show_is_cdf'] and self.legend_attrs['show_is_csv'] and not legend_items:
            legend_items.append(plotdata.get_data_source_str())  # only show when legend is empty

        return ' '.join(legend_items)

    def get_legend_include(self, attr_name):
        """
        Determine if a legend attribute should be included in the legend

        The rule for adding an attribute to the legend is if multiple plotted
        variables have different values for a checked attribute.  For example, if
        var A and var B both have different runid's, then their runid's are added
        to the legend.  If there is only one variable to plot, then no attributes
        will be added to the legend.

        Parameters:
        * attr_name (str): The name of a LegendAttributes member

        Returns:
        * (bool) True if the attribute should be added to the legend
        """

        attrs = set()
        for d in self.data:
            attrs.add(getattr(d, attr_name))

        return len(attrs) > 1

    def get_plot_limits(self):
        """
        Get the limits of the plot, adjusted by padding parameters set in plot settings

        The axes limits are adjusted by the percentage given for xpad and ypad
        in the plot settings object, in each direction for either axis.  For
        example, if ypad = 1, then the limits of the yaxis are both increased
        and decreased by 1%.  Note that MatPlotLib uses default padding of
        something like 5% on each axis, so setting padding values smaller
        than this value will produce tighter plots than what would be created
        if the padding wasn't adjusted.

        Returns:
        * xlims (tuple[float]): The x-axis limits of the plot
        * ylims (tuple[float]): The y-axis limits of the plot
        """

        def get_lims(minval, maxval, padding, invert_axis):
            """Get the axis limits after applying padding, checking values, and checking axis inversion"""
            if minval < maxval:
                offset = (maxval - minval) * padding
                minval, maxval = minval - offset, maxval + offset
            else:
                minval -= 1  # default values
                maxval += 1
            return (minval, maxval) if not invert_axis else (maxval, minval)

        # Set default boundaries
        xmin, xmax = -np.inf, np.inf
        ymin, ymax = -np.inf, np.inf

        # Set strict axes boundaries
        if self.xmin is not None:
            xmin = self.xmin
        if self.xmax is not None:
            xmax = self.xmax
        if self.ymin is not None:
            ymin = self.ymin
        if self.ymax is not None:
            ymax = self.ymax

        # all_xvals = np.hstack([d.xvals for d in self.data[1:]])
        # all_yvals = np.hstack([d.yvals for d in self.data[1:]])
        # for d in self.data:

        all_xvals = np.hstack([d.xvals[np.logical_and(d.xvals <= xmax, d.xvals >= xmin)] for d in self.data])
        all_yvals = np.hstack([d.yvals[np.logical_and(d.xvals <= xmax, d.xvals >= xmin)] for d in self.data])

        if xmin == -np.inf:
            xmin = all_xvals[~np.isnan(all_xvals)].min()
        if xmax == np.inf:
            xmax = all_xvals[~np.isnan(all_xvals)].max()
        if ymin == -np.inf:
            ymin = all_yvals[~np.isnan(all_yvals)].min()
        if ymax == np.inf:
            ymax = all_yvals[~np.isnan(all_yvals)].max()

        if self.xmin_cutoff is not None:
            xmin = max(xmin, self.xmin_cutoff)
        if self.xmax_cutoff is not None:
            xmax = min(xmax, self.xmax_cutoff)
        if self.ymin_cutoff is not None:
            ymin = max(ymin, self.ymin_cutoff)
        if self.ymax_cutoff is not None:
            ymax = min(ymax, self.ymax_cutoff)

        # Set cutoff values for each axis


        # using_rho = (np.array([d.rho for d in self.data]) != None).any()  # '!= None' syntax is needed with numpy

        # if using_rho:
        #     xvals_trim = all_xvals[np.absolute(all_yvals) / max(abs(ymin), abs(ymax)) > 1e-3]  # Trim the x-limits of zeros
        #     xmin_trim, xmax_trim = xvals_trim.min(), xvals_trim.max()
        #     xoffset_trim = (xmax_trim - xmin_trim) * plot_settings.xaxis_trim_padding
        #     xmin = max(xmin, xmin_trim - xoffset_trim)  # Keep trimmed xmin >= actual xmin
        #     xmax = min(xmax, xmax_trim + xoffset_trim)  # Keep trimmed xmax <= actual xmax

        xlims = get_lims(xmin, xmax, self.xaxis_padding, self.invert_x_axis)
        ylims = get_lims(ymin, ymax, self.yaxis_padding, self.invert_y_axis)

        return xlims, ylims

    def get_plot_title(self):
        """
        Get the title for the plot

        If the title override is set, then the title override value is used
        for the title of the plot.

        If there is no title override, then a title is generated from the
        intersection of all words in the names of the y-variables being
        plotted.

        Title details are added when all variables share the same value of the
        corresponding attribute.  Possible details are: runid, time, scan
        factor, rho value.

        Returns:
        * (str): The title for the plot
        """

        if self.title_override:
            base_title = self.title_override
        elif self.allow_title_name:
            base_title = self._generate_unique_title()
        else:
            base_title = ''

        base_title = base_title.strip()
        title_details = self._get_title_details()

        if base_title and title_details:
            title_details = f' ({title_details})'

        return f'{base_title}{title_details}'

    def _generate_unique_title(self):
        """
        Generate a title by taking the intersection of all words that appear
        in the name of each y-variable being plotted.

        Example 1:
            name1 = 'Thermal Ion Density'
            name2 = 'Deuterium Ion Density'

            >>> The generated title would be 'Ion Density', since both of
                these words are in each name.

        Example 2:
            name1 = 'Thermal Ion Density'
            name2 = 'Deuterium Ion Density'
            name3 = 'Electron Density'

            >>> The generated title would be 'Density', since this is the only
                word that is in each name.

        Note that the title will be blank if the intersection of all words is
        empty.

        Returns:
        * (str): The unique title for the plot
        """

        unique_ynames = set([data.yvarname for data in self.data])
        first_name_words = self.data[0].yvarname.split()
        title_words = []

        # Form list of title words for words that appear in the first y-variable name
        for word in first_name_words:
            append_word = True
            for name in unique_ynames:
                if word not in name:
                    append_word = False
                    break
            if append_word:
                title_words.append(word)

        return ' '.join(title_words)

    def _get_title_details(self):
        """
        Get the title details

        Details are added to the title if the corresponding title details
        switch is enabled and all variables share the same value for that
        attribute. Possible title details include the runid, time, and rho
        value for each plotted variable.  For example, if all plotted
        variables share the same runid, then the runid is added to the
        title.

        Returns:
        * (str): The details to add to the title
        """

        title_details_list = []
        allow_runid = self.allow_title_runid
        allow_time = self.allow_title_time
        allow_rho = self.allow_title_rho
        allow_factor = self.allow_title_factor

        if allow_runid or allow_time or allow_rho:
            var = self.data[0]  # use first variable values for title details (same for all variables)

            if allow_runid and not self.legend_attrs['show_runid'] and not self.legend_attrs['show_runname']:
                # all lines have same runid or runname
                title_details_list.append(var.get_run_label_str())
            if allow_time and not self.legend_attrs['show_time'] and not self.contains_timeplot:
                # all lines have same time
                title_details_list.append(var.get_time_label_str())
            if allow_rho and not self.legend_attrs['show_rho'] and var.rho is not None:
                # all lines have same rho, and rho is not None
                title_details_list.append(var.get_rho_label_str())
            if (allow_factor and not self.legend_attrs['show_factor']
                    and not self.legend_attrs['show_factor_symbol'] and var.factor is not None):
                title_details_list.append(var.get_factor_label_str())

        return f'{", ".join(title_details_list)}' if title_details_list else ''

    def get_plot_ylabel(self, offset_text):
        """
        Get the yaxis label for the plot

        If the ylabel override is set, then that is used for the ylabel of the
        plot.  Otherwise, the unique units of each y-variable are added to the
        ylabel (the same units aren't repeated).  Additionally, if the y-variable
        symbols do not appear in the legend, then these unique symbols are also
        added to the ylabel.

        Parameters:
        * offset_text (str): The offset text from the y-axis of the plot

        Returns:
        * (str): The ylabel for the plot
        """

        offset_text = self._format_offset_text(offset_text)

        if self.ylabel_override:
            return f'{self.ylabel_override}{offset_text}'

        ylabels = []  # Not using a set to preserve order
        for d in self.data:
            units_str = self._get_units_str(d.yunits)
            if not self.legend_attrs['show_ysymbol'] and not self.legend_attrs['show_xsymbol']:
                # ysymbol not in legend
                ystr = fr'{d.ysymbol} {units_str}'
                if ystr not in ylabels:
                    ylabels.append(ystr)
            elif units_str not in ylabels:  # ysymbol is in the legend (showing xsymbol also shows ysymbol)
                ylabels.append(units_str)

        joined_labels = r'$\!$,  '.join(ylabels)  # small negative space before each comma

        if self.nomralize_y_axis:
            joined_labels = f'{joined_labels} (normalized)'

        return f'{joined_labels}{offset_text}'

    def get_plot_xlabel(self, offset_text):
        """
        Get the xaxis label for the plot

        If the xlabel override is set, then that is used for the xlabel of the
        plot.  Otherwise, the unique symbols and units of each x-variable are
        added to the ylabel (the same units aren't repeated).

        Parameters:
        * offset_text (str): The offset text from the x-axis of the plot

        Returns:
        * (str): The xlabel for the plot
        """

        offset_text = self._format_offset_text(offset_text)

        if self.xlabel_override:
            return f'{self.xlabel_override}{offset_text}'

        xlabels = []  # Not using a set to preserve order
        for d in self.data:
            xstr = f'{d.xsymbol} {self._get_units_str(d.xunits)}'
            if xstr not in xlabels:
                xlabels.append(xstr)

        joined_labels = r'$\!$,  '.join(xlabels)  # small negative space before each comma

        if self.nomralize_x_axis:
            joined_labels = f'{joined_labels} (normalized)'

        return f'{joined_labels}{offset_text}'

    def save_to_csv(self, file_name=''):
        """
        Save plotted data to a CSV

        Data is saved in the order it is generated, so the first CSV column
        will be the first variable defined in FigData, etc.  Filenames
        are chosen as sequentially increasing integers.

        Raises:
        * NameError: If a file name can not be chosen
        * FileNotFoundError: If the file cannot be found after saving it
        """

        show_save_message = True

        if not file_name:  # Automatically generate the save name using a unique number
            show_save_message = True
            save_name_digits = 4
            save_dir = f'{utils.get_plotting_singles_path()}\\misc'
            utils.create_directory(save_dir)
            saved_files = utils.get_files_in_dir(save_dir, '*.csv')
            for save_number in range(1, 10**save_name_digits):
                file_name = f'{save_dir}\\{save_number:0>{save_name_digits}d}'
                if f'{file_name}.csv' not in saved_files:
                    break

            if not file_name:
                raise NameError('The filename for the CSV could not be set\n'
                                '\tMake sure Python has file reading permissions,'
                                ' and try deleting old CSVs from the CSV folder\n')

        file_name = f'{file_name}.csv'

        max_var_length = max([len(d.xvals) for d in self.data])
        num_vars = 2 * len(self.data)

        output = np.full((max_var_length, num_vars), np.nan, dtype=float)
        for i, d in enumerate(self.data):
            output[:len(d.xvals), 2 * i] = d.xvals
            output[:len(d.yvals), 2 * i + 1] = d.yvals

        prec, col_pad = 4, 7
        col_len = prec + col_pad
        fmt_str = f'%{col_len}.{prec}e'
        header = ',  '.join([f'{d.xname:>{col_len - 2}},  {d.yname:>{col_len - 2}}' for d in self.data])

        np.savetxt(file_name, output, header=header, fmt=fmt_str, delimiter=',')

        if not utils.check_exists(file_name):
            raise FileNotFoundError('Failed to save plot data to a CSV in the CSV folder\n'
                                    '\tMake sure Python has file writing permissions')

        if show_save_message:
            print(f'Plot Data Saved:\n\t{file_name}\n')  # Intentionally not using logging


def main(fig_data, savefig=False, savedata=False):
    """
    Create a plot using data loaded from CDF files

    This method advances the plot cycler twice for each variable in
    FigData, by plotting twice for each variable.  The first plot is a
    line of the normal data for the variable, and the second plot is a single
    point of the base value for the previously plotted line.  When a variable
    contains no base values, as is the case when not plotting a specific
    point of rho, then empty lists are plotted; this allows us to advance the
    cycler without adding anything to the plot, as no methods exist for us to
    directly increment the cycler.

    Parameters:
    * fig_data (FigData): Object containing all PlotData objects
    * savefig (bool): Automatically save the plot without showing it if True
    * savedata (bool): Automatically save the data as a CSV
    """

    def on_press(event):
        if event.key == 'x':  # flip x-axis limits
            plt.xlim(plt.xlim()[::-1])
            fig.canvas.draw()

        if event.key == 'y':  # flip y-axis limits
            plt.ylim(plt.ylim()[::-1])
            fig.canvas.draw()

        if event.key == "ctrl+c":  # copy figure to clipboard
            save_format = plt.rcParams['savefig.format']
            plt.rcParams.update({'savefig.format': 'png'})
            with io.BytesIO() as buffer:
                fig.savefig(buffer)
                QApplication.clipboard().setImage(QImage.fromData(buffer.getvalue()))
                plt.rcParams.update({'savefig.format': save_format})

        if event.key == 'alt+s':  # save plot lines to csv
            fig_data.save_to_csv()

    fig, ax = plt.gcf(), plt.gca()
    fig.canvas.mpl_connect('key_press_event', on_press)

    for d in fig_data.data:
        # x = d.xvals[np.absolute(d.yvals) > 1e-1]
        # y = d.yvals[np.absolute(d.yvals) > 1e-1]
        # ax.semilogx(x, y, label=fig_data.get_legend_label(d))
        # ax.plot([],[])

        ax.plot(d.xvals, d.yvals, label=fig_data.get_legend_label(d))
        ax.plot(d.xval_base, d.yval_base, zorder=3)  # Advance the cycler when base values are empty lists

    xlims, ylims = fig_data.get_plot_limits()
    ax.set(xlim=xlims, ylim=ylims)  # lims need to be set before getting offsetText

    offset_text_x = offset_text_y = ''
    if fig_data.replace_offset_text:
        fig.canvas.draw()  # needed to populate the offsetText string
        ax.xaxis.offsetText.set_visible(False)
        ax.yaxis.offsetText.set_visible(False)
        offset_text_x = ax.xaxis.offsetText.get_text()
        offset_text_y = ax.yaxis.offsetText.get_text()

    ax.set(
        title=fig_data.get_plot_title(),
        xlabel=fig_data.get_plot_xlabel(offset_text_x),
        ylabel=fig_data.get_plot_ylabel(offset_text_y),
    )

    if fig_data.xticks is not None:
        plt.xticks(fig_data.xticks)

    if fig_data.yticks is not None:
        plt.yticks(fig_data.yticks)

    if fig_data.show_legend or True:
        ax.legend().set_draggable(state=True)

    if fig_data.savefig or fig_data.savedata:
        ynames_list = list(set([d.yname for d in fig_data.data]))
        ynames_list.sort()
        ynames = ''.join(ynames_list)

        # These flags are based on the first variable being plotted
        if fig_data.data[0].options.use_gnezero:
            ynames = f'{ynames}_gne0'
        if fig_data.data[0].options.use_gtezero:
            ynames = f'{ynames}_gte0'
        if fig_data.data[0].options.use_gtizero:
            ynames = f'{ynames}_gti0'
        if fig_data.data[0].options.use_gneabs:
            ynames = f'{ynames}_gneabs'
        if fig_data.savename_append:
            ynames = f'{ynames}_{fig_data.savename_append}'
        if fig_data.data[0].timeplot:
            ynames = f'{ynames}_time'

        savedir_base = f'{utils.get_plotting_singles_path()}\\{fig_data.data[0].options.runid}'
        utils.create_directory(savedir_base)

    if fig_data.savedata:
        savedir = f'{savedir_base}\\data'
        utils.create_directory(savedir)
        fig_data.save_to_csv(f'{savedir}\\{ynames}')

    if fig_data.savefig:
        savedir = f'{savedir_base}\\figures'
        utils.create_directory(savedir)
        fig.savefig(f'{savedir}\\{ynames}')
        fig.clear()
    else:
        plt.show()


if __name__ == '__main__':
    """Run this module directly to plot variable data stored in CDF or CSV files"""

    utils.init_logging()

    # Initialize visual styles for the plot
    PlotStyles(
        axes=StyleType.Axes.WHITE,
        lines=StyleType.Lines.RHO_MMM,
        layout=StyleType.Layout.AIP3,
    )

    plt.rcParams.update({
        'savefig.format': 'pdf',  # Common save formats: png, pdf, eps
    })

    # Define settings for the plot
    fig_data = FigData(
        replace_offset_text=0,
        allow_title_runid=0,
        allow_title_time=0,
        allow_title_factor=1,
        allow_title_rho=1,
        invert_y_axis=False,
        invert_x_axis=False,
        nomralize_y_axis=False,
        nomralize_x_axis=False,
        title_override=' ',
        ylabel_override='',
        xlabel_override='',
        savefig=False,
        savedata=True,
    )

    # Define data for the plot (Examples shown below)
    fig_data.set(
        # CDF: Same y-variable, different x-variables
        # PlotDataCdf(runid='138536A01', yname='te', xname='rmina', zval=0.50),
        # PlotDataCdf(runid='138536A01', yname='te', xname='rho', zval=0.50),
        # CDF: Different y-variable units
        # PlotDataCdf(runid='138536A01', yname='te', xname='rho', zval=0.50),
        # PlotDataCdf(runid='138536A01', yname='ti', xname='rho', zval=0.50),
        # PlotDataCdf(runid='138536A01', yname='btor', xname='rho', zval=0.50),
        # CDF: Different runid, y-variables, and zvals
        # PlotDataCdf(runid='120982A09', yname='ne', xname='rho', zval=0.60),
        # PlotDataCdf(runid='120968A02', yname='ni', xname='rho', zval=0.50),
        # PlotDataCdf(runid='129041A10', yname='nd', xname='rho', zval=0.40),
        # CDF: Compare as a function of time
        # PlotDataCdf(runid='138536A01', yname='te', xname='time', zval=0.40, timeplot=True),
        # PlotDataCdf(runid='138536A01', yname='te', xname='time', zval=0.50, timeplot=True),
        # PlotDataCdf(runid='138536A01', yname='te', xname='time', zval=0.60, timeplot=True),
        # CDF: Compare TRANSP and MMM calculations (must be defined in calculations.py)
        # PlotDataCdf(runid='141552A01', yname='loge', xname='rho', zval=0.629, source='cdf'),
        # PlotDataCdf(runid='141552A01', yname='loge', xname='rho', zval=0.629),
        # CDF and CSV: Compare same variable from different data sources
        # PlotDataCdf(runid='138536A01', yname='ne', xname='rho', zval=0.629),
        # PlotDataCsv(runid='138536A01', yname='ne', xname='rho', scan_num=2),
        # CSV: Different scanned variables with same scan factor
        # PlotDataCsv(runid='138536A01', yname='ne', xname='rho', scan_num=1, scan_factor=2.5),
        # PlotDataCsv(runid='138536A01', yname='ne', xname='rho', scan_num=2, scan_factor=2.5),
        # PlotDataCsv(runid='138536A01', yname='ne', xname='rho', scan_num=5, scan_factor=2.5),
        # CSV: Comparing output results
        # PlotDataCsv(runid='138536A01', yname='xteETGM', xname='rho', scan_num=17, legend='exbs = 0'),
        # PlotDataCsv(runid='138536A01', yname='xteETGM', xname='rho', scan_num=54, legend='exbs = 1'),
        # # CSV: Growth rate vs \eta_e
        # PlotDataCsv(runid='138536A01', yname='gmaETGM', xname='etae', scan_num=35, rho_value=0.10),
        # CSV: Growth rate as a function of different scanned variables
        # PlotDataCsv(runid='138536A01', yname='gmaETGM', xname='var_to_scan', scan_num=15, rho_value=0.39, runname=r'OLD'),
        # PlotDataCsv(runid='138536A01', yname='gmaETGM', xname='var_to_scan', scan_num=55, rho_value=0.39, runname=r'NEW'),
    )

    fig_data.set(

        # PlotDataCdf(runid='129016A03', yname='te', xname='rho', zval=0.395, legend='Experiment'),
        # PlotDataCdf(runid='129016Q50', yname='te', xname='rho', zval=0.395, legend='Off'),
        # PlotDataCdf(runid='129016Q93', yname='te', xname='rho', zval=0.395, legend='W20 +'),
        # PlotDataCdf(runid='129016Q94', yname='te', xname='rho', zval=0.395, legend='W20 +-'),
        # PlotDataCdf(runid='129016Q50', yname='ti', xname='rho', zval=0.395, legend='Off'),
        # PlotDataCdf(runid='129016W47', yname='ti', xname='rho', zval=0.395, legend='DBM Failure'),
        # PlotDataCdf(runid='129016W52', yname='ti', xname='rho', zval=0.395, legend='DBM Failure'),
        # PlotDataCdf(runid='129016X31', yname='xkew20', xname='rho', zval=0.4, legend='DBM Failure'),

        # PlotDataCdf(runid='129016X35', yname='bpol', xname='xb', zval=0.391, source='mmm', legend='MMM'),
        # PlotDataCdf(runid='129016X31', yname='bpol', xname='xb', zval=0.391, source='cdf', legend='CDF'),
        # xmax=0.79,

        # PlotDataCdf(runid='129016X31', yname='dbp', xname='xb', zval=0.391, source='mmm', legend='MMM Definition'),
        # PlotDataCdf(runid='129016X31', yname='d2bp', xname='xb', zval=0.391, source='mmm', legend='MMM Definition'),



        # PlotDataCdf(runid='129016Q93', yname='xkemtm', xname='rho', zval=0.4),
        # PlotDataCdf(runid='129016Q93', yname='wexb', xname='rho', zval=0.4),

        # PlotDataCdf(runid='129016A03', yname='gte', xname='rmina', zval=0.46),
        # PlotDataCdf(runid='129016A03', yname='gte', xname='rmina', zval=0.462),
        # PlotDataCdf(runid='129016A03', yname='gte', xname='rmina', zval=0.465),
        # PlotDataCdf(runid='129016A03', yname='gte', xname='rmina', zval=0.49),
        # xmin=0.59,xmax=0.61,
        
        # PlotDataCdf(runid='138536A01', yname='vtorx', xname='xb', zval=0.629, legend=r'RMAJ$\cdot$OMEGA'),
        # PlotDataCdf(runid='138536A01', yname='vtorxnc', xname='xb', zval=0.629, legend=r'VTORX$\_$NC'),

        # PlotDataCdf(runid='120982A09', yname='ti', xname='xb', zval=0.629),
        # PlotDataCdf(runid='120982A09', yname='nf', xname='xb', zval=0.629),
        # PlotDataCdf(runid='120982A09', yname='pf', xname='xb', zval=0.629),

        # PlotDataCdf(runid='138536A01', yname='gti', xname='xb', zval=0.629),
        # PlotDataCdf(runid='138536A01', yname='gnf', xname='xb', zval=0.629),
        # PlotDataCdf(runid='120982A09', yname='gpf', xname='xb', zval=0.629),
        # PlotDataCdf(runid='120982A09', yname='gpf2', xname='xb', zval=0.629),
        

        # PlotDataCdf(runid='138536A01', yname='nf', xname='rho', zval=0.629),
        # PlotDataCdf(runid='138536A01', yname='nf2', xname='rho', zval=0.629),

        # PlotDataCdf(runid='121123K55', yname='tmhdf', xname='rho', zval=0.629),

        # PlotDataCdf(runid='138536A01', yname='pmhdf', xname='rho', zval=0.629),
        # PlotDataCdf(runid='138536A01', yname='p', xname='rho', zval=0.629),
        # PlotDataCdf(runid='138536A01', yname='pmhd', xname='rho', zval=0.629),
        # # PlotDataCdf(runid='138536A01', yname='pf', xname='rho', zval=0.629),
        # PlotDataCdf(runid='138536A01', yname='pr', xname='rho', zval=0.629),
        # PlotDataCdf(runid='138536A01', yname='pmhdr', xname='rho', zval=0.629),

        # PlotDataCdf(runid='18696R06', yname='pmhd', xname='rho', zval=0.629),
        # PlotDataCdf(runid='38265R80', yname='pmhd', xname='rho', zval=0.629),
        # PlotDataCdf(runid='50000A10', yname='pmhd', xname='rho', zval=0.629),
        # PlotDataCdf(runid='80200A13', yname='pmhd', xname='rho', zval=0.629),
        # PlotDataCdf(runid='80300A02', yname='pmhd', xname='rho', zval=0.629),


        # PlotDataCdf(runid='138536A01', yname='ti', xname='rho', zval=0.629),
        # PlotDataCdf(runid='138536A01', yname='epapl', xname='rho', zval=0.629, source='cdf'),
        # PlotDataCdf(runid='138536A01', yname='epapp', xname='rho', zval=0.629, source='cdf'),
        # PlotDataCdf(runid='138536A01', yname='epa', xname='rho', zval=0.629),
        # PlotDataCdf(runid='138536A01', yname='tmhdf', xname='rho', zval=0.629),
        # PlotDataCdf(runid='138536A01', yname='pmhdf', xname='rho', zval=0.629),

        # PlotDataCdf(runid='138536A01', yname='nf', xname='rho', zval=0.629),
        # PlotDataCdf(runid='138536A01', yname='nfd', xname='rho', zval=0.629),
        # PlotDataCdf(runid='138536A01', yname='nfmp', xname='rho', zval=0.629),

        # PlotDataCdf(runid='138536A01', yname='nfmp', xname='rmajm', zval=0.629),

        # PlotDataCdf(runid='138536A01', yname='ebeamsum', xname='rmajm', zval=0.629),

        # PlotDataCdf(runid='138536A01', yname='dvol', xname='rho', zval=0.629),

        # PlotDataCdf(runid='138536A01', yname='rmaj', xname='rho', zval=0.629),
        # PlotDataCdf(runid='138536A01', yname='rmajm', xname='rho', zval=0.629),

        # PlotDataCdf(runid='138536A01', yname='ebeam', xname='rho', zval=0.629),
        # PlotDataCdf(runid='138536A01', yname='ebeampp', xname='rho', zval=0.629),
        # PlotDataCdf(runid='138536A01', yname='ebeampl', xname='rho', zval=0.629),
        # PlotDataCdf(runid='138536A01', yname='ebeamsum', xname='rho', zval=0.629),

        # PlotDataCdf(runid='138536A01', yname='tf', xname='rho', zval=0.629),
        # PlotDataCdf(runid='138536A01', yname='tmhdf', xname='rho', zval=0.629),
        # PlotDataCdf(runid='138536A01', yname='tbtbe', xname='rho', zval=0.629),
        # PlotDataCdf(runid='138536A01', yname='tfast', xname='rho', zval=0.629),

        # PlotDataCdf(runid='138536A01', yname='bpshi', xname='time', zval=0.629),

        # PlotDataCdf(runid='138536A01', yname='gr2i', xname='rho', zval=0.629),

        # PlotDataCdf(runid='138536A01', yname='pmhdf', xname='rho', zval=0.629),
        # PlotDataCdf(runid='138536A01', yname='p', xname='rho', zval=0.629),
        # PlotDataCdf(runid='138536A01', yname='ebeamr', xname='rho', zval=0.58),

        # PlotDataCdf(runid='138536A01', yname='tf', xname='rho', zval=0.629),
        # PlotDataCdf(runid='138536A01', yname='tmhdf', xname='rho', zval=0.629),
        # PlotDataCdf(runid='138536A01', yname='tbtbe', xname='rho', zval=0.629),

        # PlotDataCdf(runid='138536A01', yname='ebeam', xname='rho', zval=0.0),
        # PlotDataCdf(runid='138536A01', yname='tf', xname='rho', zval=0.8),
        # PlotDataCdf(runid='138536A01', yname='gtf', xname='rho', zval=0.8),

        # PlotDataCdf(runid='132017T01', yname='pmhd', xname='rho', zval=0.629),
        # PlotDataCdf(runid='132017T01', yname='pmhdf', xname='rho', zval=0.629),
        # PlotDataCdf(runid='132017T01', yname='pmhdr', xname='rho', zval=0.629),
        # PlotDataCdf(runid='132017T01', yname='p', xname='rho', zval=0.629),
        # PlotDataCdf(runid='132017T01', yname='pf', xname='rho', zval=0.629),

        # PlotDataCdf(runid='141031A01', yname='ebeam', xname='rho', zval=0.629),
        # PlotDataCdf(runid='141031A01', yname='epa', xname='rho', zval=0.629),
        # PlotDataCdf(runid='141031A01', yname='tmhdf', xname='rho', zval=0.629),


        # PlotDataCdf(runid='141552A01', yname='ebeam2', xname='rho', zval=0.629),
        # PlotDataCdf(runid='141552A01', yname='tmhdf', xname='rho', zval=0.629),

        # PlotDataCdf(runid='129017A04', yname='epapl', xname='rho', zval=0.629),
        # PlotDataCdf(runid='129017A04', yname='epapp', xname='rho', zval=0.629),
        # PlotDataCdf(runid='129017A04', yname='epa', xname='rho', zval=0.629),
        # PlotDataCdf(runid='129017A04', yname='ebeam', xname='rho', zval=0.629),
        



        # PlotDataCdf(runid='129016A03', yname='ne', xname='rho', zval=0.46),
        # PlotDataCdf(runid='129016A03', yname='ni', xname='rho', zval=0.46),
        # PlotDataCdf(runid='129016A03', yname='ni2', xname='rho', zval=0.46),

        # PlotDataCdf(runid='138536A01', yname='gq', xname='rho', input_points=1001, apply_smoothing=True, zval=0.63),
        # PlotDataCdf(runid='129041A10', yname='gq', xname='rho', input_points=1001, apply_smoothing=True, zval=0.49),
        # PlotDataCdf(runid='120982A09', yname='gq', xname='rho', input_points=1001, apply_smoothing=True, zval=0.62),
        # PlotDataCdf(runid='120968A02', yname='gq', xname='rho', input_points=1001, apply_smoothing=True, zval=0.56),

        # PlotDataCdf(runid='129041A10', yname='gq', xname='rho', apply_smoothing=True, zval=0.49),
        # PlotDataCdf(runid='129041A10', yname='gq', xname='rho', input_points=101, apply_smoothing=True, zval=0.49),
        # PlotDataCdf(runid='129041A10', yname='gq', xname='rho', input_points=1001, apply_smoothing=True, zval=0.49),
        
        # PlotDataCdf(runid='85126T02', yname='curdoh', zval=4),
        # PlotDataCdf(runid='85610T01', yname='curdoh', zval=4),
        # PlotDataCdf(runid='85126T02', yname='area', zval=4),
        # PlotDataCdf(runid='85610T01', yname='area', zval=4),
       
        # PlotDataCdf(runid='85126T02', yname='curoh', xname='time', timeplot=True, zval=0),
        # PlotDataCdf(runid='85610T01', yname='curoh', xname='time', timeplot=True, zval=0),
        # PlotDataCdf(runid='85126T02', yname='curohrho', xname='rho', zval=4),
        # PlotDataCdf(runid='85610T01', yname='curohrho', xname='rho', zval=4),
        
        # PlotDataCdf(runid='120968A02', yname='icur', xname='time', timeplot=True, zval=0),
        # PlotDataCdf(runid='120968A02', yname='jcur', xname='rho', zval=0.559),
        # PlotDataCdf(runid='120968A02', yname='area', xname='rho', zval=0.559),

        # PlotDataCdf(runid='120968A02', yname='q', xname='rho', zval=0.56),
        # PlotDataCdf(runid='120982A09', yname='wexb', xname='rho', zval=0.62),
        # PlotDataCdf(runid='129041A10', yname='q', xname='rho', zval=0.49),
        # PlotDataCdf(runid='138536A01', yname='gnh', xname='rho', zval=0.629, apply_smoothing=1, input_points=101),
        # PlotDataCsv(runid='138536A01', yname='q', xname='rho', scan_num=253),
        # PlotDataCdf(runid='138536A01', yname='etanc', xname='rho', zval=0.629),


        # PlotDataCsv(runid='138536A01', yname='gmaEPM', xname='rho', scan_num=547, legend=r'Old', scan_factor=0.001),
        # PlotDataCsv(runid='138536A01', yname='gmaEPM', xname='rho', scan_num=551, legend=r'New', scan_factor=0.001),
        # PlotDataCsv(runid='138536A01', yname='kyrhosEPM', xname='rho', scan_num=655, legend=r'Default'),
        # PlotDataCsv(runid='138536A01', yname='gmaEPM', xname='rho', scan_num=656, legend=r'Kyrhos Correlation Loop'),
        # PlotDataCsv(runid='138536A01', yname='gmaEPM', xname='rho', scan_num=657, legend=r'Kyrhos Correlation Loop'),
        # PlotDataCsv(runid='138536A01', yname='gmaEPM', xname='rho', scan_num=443),
        # PlotDataCsv(runid='138536A01', yname='gmaEPM', xname='rho', scan_num=444),
        # PlotDataCsv(runid='138536A01', yname='gmaEPM', xname='rho', scan_num=449),

        # PlotDataCsv(runid='129016A03', yname='omgnETGM', xname='kyrhosETGM', scan_num=72, rho_value=0.477, legend=r'BR34 = (1 + FL) / kpc'),
        # PlotDataCsv(runid='129016A03', yname='omgnETGM', xname='kyrhosETGM', scan_num=71, rho_value=0.477, legend=r'BR34 = 1 / kpc'),
        # PlotDataCsv(runid='129016A03', yname='gmanETGM', xname='kyrhosETGM', scan_num=37, rho_value=0.477, legend=r'1.0 fsa'),
        # PlotDataCsv(runid='129016A03', yname='gmanETGM', xname='kyrhosETGM', scan_num=42, rho_value=0.477, legend=r'0.5 fsa'),
        # title_override=r'$r/a = 0.6$',xmin=np.log10(0.1),
        # PlotDataCsv(runid='129016A03', yname='omgnETGM', xname='kyrhosETGM', scan_num=37, rho_value=0.477, legend=r'0.50 kx/ky'),
        # PlotDataCsv(runid='129016A03', yname='gmanETGM', xname='kyrhosETGM', scan_num=43, rho_value=0.477, legend=r'0.25 kx/ky'),
        # title_override=r'$r/a = 0.6$',xmin=np.log10(0.1),
        # PlotDataCsv(runid='129016A03', yname='gmanETGM', xname='kyrhosETGM', scan_num=37, rho_value=0.572, legend=r'1.0 fsa'),
        # PlotDataCsv(runid='129016A03', yname='gmanETGM', xname='kyrhosETGM', scan_num=42, rho_value=0.572, legend=r'0.5 fsa'),
        # title_override=r'$r/a = 0.7$',xmin=np.log10(0.1),

        # PlotDataCsv(runid='129016A03', yname='gmaDBM', xname='kyrhosDBM, scan_num=93, rho_value=0.57),

        # PlotDataCsv(runid='129016A03', yname='gmanETGM', xname='kyrhosETGM', scan_num=42, rho_value=0.57),
        # PlotDataCsv(runid='129016A03', yname='omgnETGM', xname='kyrhosETGM', scan_num=42, rho_value=0.57),
        # title_override=r'$r/a = 0.7$',xmin=np.log10(0.1),

        # PlotDataCsv(runid='129016A03', yname='fte', xname='gte', scan_num=78, rho_value=0.48),
        # PlotDataCsv(runid='129016A03', yname='fte', xname='gte', scan_num=78, rho_value=0.57),

        # PlotDataCsv(runid='129016A03', yname='gmaETGM', xname='gte', scan_num=83, rho_value=0.57),  # kyrhos = 13
        # PlotDataCsv(runid='129016A03', yname='gmaETGM', xname='gte', scan_num=84, rho_value=0.57),  # kyrhos = 18
        # PlotDataCsv(runid='129016A03', yname='gmaETGM', xname='gte', scan_num=85, rho_value=0.57),  # kyrhos = 25
        # PlotDataCsv(runid='129016A03', yname='gmaETGM', xname='gte', scan_num=86, rho_value=0.57),  # kyrhos = 33

        # PlotDataCsv(runid='129016A03', yname='gmaETGM', xname='kyrhosETGM', scan_num=87, rho_value=0.48),  # kyrhos scan
        # PlotDataCsv(runid='129016A03', yname='gmaETGM', xname='kyrhosETGM', scan_num=87, rho_value=0.57),  # kyrhos scan

        # PlotDataCsv(runid='129016A03', yname='gmanETGM', xname='gte', scan_num=88, rho_value=0.48, legend=r'$k_{\rm y}\rho_{\rm s} = 2$'),  # kyrhos = 2
        # PlotDataCsv(runid='129016A03', yname='gmanETGM', xname='gte', scan_num=89, rho_value=0.48, legend=r'$k_{\rm y}\rho_{\rm s} = 4$'),  # kyrhos = 4
        # PlotDataCsv(runid='129016A03', yname='gmanETGM', xname='gte', scan_num=90, rho_value=0.48, legend=r'$k_{\rm y}\rho_{\rm s} = 8$'),  # kyrhos = 8
        # PlotDataCsv(runid='129016A03', yname='gmanETGM', xname='gte', scan_num=91, rho_value=0.48, legend=r'$k_{\rm y}\rho_{\rm s} = 16$'),  # kyrhos = 16

        
        # PlotDataCsv(runid='129016A03', yname='vcz', xname='rho', scan_num=75,),
        # PlotDataCsv(runid='129016A03', yname='vct', xname='rho', scan_num=75,),
        # PlotDataCsv(runid='129016A03', yname='vcp', xname='rho', scan_num=75,),

        # PlotDataCsv(runid='138536A01', yname='gmaEPM', xname='rho', scan_num=751, legend='Guess = 0'),
        # PlotDataCsv(runid='138536A01', yname='gmaEPM', xname='rho', scan_num=752, legend='Default Guess'),
        # PlotDataCsv(runid='138536A01', yname='gmaEPM', xname='rho', scan_num=750, legend='Increased Guess'),
        # PlotDataCsv(runid='138536A01', yname='gmaEPM', xname='rho', scan_num=753, legend='Enormous Guess'),


        # PlotDataCsv(runid='138536A01', yname='gaveEPM', xname='rho', scan_num=757, legend='Guess = 0'),
        # PlotDataCsv(runid='138536A01', yname='gaveEPM', xname='rho', scan_num=756, legend='Default Guess'),
        # PlotDataCsv(runid='138536A01', yname='gaveEPM', xname='rho', scan_num=755, legend='Increased Guess'),
       
        # PlotDataCsv(runid='138536A01', yname='gmaW20i', xname='rho', scan_num=1048, legend='Guess = 0'),
        # PlotDataCsv(runid='138536A01', yname='gmaW20i', xname='rho', scan_num=1051, legend='Guess = 0'),
        

        # PlotDataCsv(runid='138536A01', yname='fti', xname='rho', scan_num=1130, scan_factor=0.7, legend='BaseNew'),
        # PlotDataCsv(runid='138536A01', yname='fti', xname='rho', scan_num=1248, scan_factor=0.7, legend='New'),
        # PlotDataCsv(runid='138536A01', yname='fti', xname='rho', scan_num=1244, scan_factor=0.7, legend='BaseOld'),
        # PlotDataCsv(runid='138536A01', yname='fti', xname='rho', scan_num=1241, scan_factor=0.7, legend='Old'),
        # PlotDataCsv(runid='138536A01', yname='fte', xname='rho', scan_num=1203, scan_factor=0.8, legend='++'),
        

        # PlotDataCsv(runid='138536A01', yname='gmaW20i', xname='weiland_gmult', scan_num=1059, rho_value=0.99, legend='1 + i'),
        # PlotDataCsv(runid='138536A01', yname='gmaW20i', xname='weiland_gmult', scan_num=1059, rho_value=0.99, legend='1 + i'),


        # PlotDataCsv(runid='118341T54', yname='omgW20i', xname='weiland_gmult', scan_num=565, rho_value=0.5, legend='Default'),
        # PlotDataCsv(runid='118341T54', yname='omgW20i', xname='weiland_gmult', scan_num=564, rho_value=0.5, legend='1 + i'),
        # xmin=-1, ymax=2.5e5,

        # PlotDataCsv(runid='118341T54', yname='kyrhosW20e', xname='rho', scan_num=564),

        # PlotDataCsv(runid='118341T54', yname='kyrhosW20i', xname='rho', scan_num=564),
        # ymin=0.19,

        # PlotDataCsv(runid='138536A01', yname='kyrhosW20i', xname='rho', scan_num=1058),
        # PlotDataCsv(runid='138536A01', yname='kyrhosW20e', xname='rho', scan_num=1058),

        
        # PlotDataCsv(runid='118341T54', yname='gmaW20i', xname='weiland_gmult', scan_num=564, rho_value=0.6),
        # PlotDataCsv(runid='118341T54', yname='gmaW20e', xname='weiland_gmult', scan_num=564, rho_value=0.5),
        # PlotDataCsv(runid='138536A01', yname='gmaW20e', xname='weiland_gmult', scan_num=1056, rho_value=0.88),
        
        # # 21908, 10, 18.14
        # PlotDataCsv(runid='138536A01', yname='omgEPM', xname='rho', scan_num=786, legend='Previous Matching'),
        # # 8728, 1, 7.07
        # PlotDataCsv(runid='138536A01', yname='omgEPM', xname='rho', scan_num=802, legend='Updated Matching'),
        # title_override='Default Guess',

        # # 25506, 17, 22.08
        # PlotDataCsv(runid='138536A01', yname='omgEPM', xname='rho', scan_num=789, legend='Previous Matching'),
        # # 13841, 6, 11.03
        # PlotDataCsv(runid='138536A01', yname='omgEPM', xname='rho', scan_num=803, legend='Updated Matching'),
        # title_override='Larger Guess',

        # # # 8879, 6, 6.88
        # PlotDataCsv(runid='138536A01', yname='omgEPM', xname='rho', scan_num=791, legend='Previous Matching'),
        # # 3352, 0, 2.31
        # PlotDataCsv(runid='138536A01', yname='omgEPM', xname='rho', scan_num=805, legend='Updated Matching'),
        # title_override='Guess = 0',

        # # 41414, 24, 26.38
        # PlotDataCsv(runid='138536A01', yname='gmaEPM', xname='rho', scan_num=795, legend='++G, dN'),
        # # 20455, 0, 12.01
        # PlotDataCsv(runid='138536A01', yname='gmaEPM', xname='rho', scan_num=796, legend='++G, 0N'),
        # # 20364, 0, 11.84
        # PlotDataCsv(runid='138536A01', yname='gmaEPM', xname='rho', scan_num=804, legend='++G, 0N, R/A'),
          
        # # 19793, 7, 16.65
        # PlotDataCsv(runid='138536A01', yname='gmaEPM', xname='rho', scan_num=797, legend='-G, dN'),
        # # 12149, 8, 8.26
        # PlotDataCsv(runid='138536A01', yname='gmaEPM', xname='rho', scan_num=798, legend='-G, 0N'),
        # # 7294, 2, 5.94
        # PlotDataCsv(runid='138536A01', yname='gmaEPM', xname='rho', scan_num=806, legend='-G, 0N, R/A'),
          
        # ------------------ 20% previous guess and 80% new guess below

         # # 23668, 15
        # PlotDataCsv(runid='138536A01', yname='gmaEPM', xname='rho', scan_num=768, legend='default Norm'),
        # # 21206, 13
        # PlotDataCsv(runid='138536A01', yname='gmaEPM', xname='rho', scan_num=769, legend='fixed Norm'),
        # # 15534, 14
        # PlotDataCsv(runid='138536A01', yname='gmaEPM', xname='rho', scan_num=770, legend='no Norm'),
       
        # # 16668, 10
        # PlotDataCsv(runid='138536A01', yname='gmaEPM', xname='rho', scan_num=773, legend='default Norm'),
        # # 16640, 9
        # PlotDataCsv(runid='138536A01', yname='gmaEPM', xname='rho', scan_num=772, legend='fixed Norm'),
        # # 8919, 4
        # PlotDataCsv(runid='138536A01', yname='gmaEPM', xname='rho', scan_num=771, legend='no Norm'),

        # # 20881, 17 -- BIGGER GUESS
        # PlotDataCsv(runid='138536A01', yname='gmaEPM', xname='rho', scan_num=774, legend='Lrg, default Norm'),
        # # 25047, 11, 14.7
        # PlotDataCsv(runid='138536A01', yname='gmaEPM', xname='rho', scan_num=774, legend='ELrg, default Norm'),
        

        # 21150, 17
        # PlotDataCsv(runid='138536A01', yname='gmaEPM', xname='rho', scan_num=775, legend='Lrg, fixed Norm'),
        # # 26601, 11, 15.44
        # PlotDataCsv(runid='138536A01', yname='gmaEPM', xname='rho', scan_num=775, legend='ELrg, fixed Norm'),
        # 8078, 0
        # PlotDataCsv(runid='138536A01', yname='gmaEPM', xname='rho', scan_num=776, legend='Lrg, no Norm'),
        # # 13979, 1, 7.91 -- HUGE GUESS
        # PlotDataCsv(runid='138536A01', yname='gmaEPM', xname='rho', scan_num=777, legend='ELrg, no Norm'),

        # # 16668, 10, 13.32 -- DEFAULT GUESS
        # PlotDataCsv(runid='138536A01', yname='gmaEPM', xname='rho', scan_num=780, legend='def, default Norm'),
        # # 3139, 0, 2.14
        # PlotDataCsv(runid='138536A01', yname='gmaEPM', xname='rho', scan_num=785, legend='0, default Norm'),
        
        # # 16640, 9. 13.13
        # PlotDataCsv(runid='138536A01', yname='gmaEPM', xname='rho', scan_num=781, legend='def, fixed Norm'),
        # # 8010, 4, 5.97
        # PlotDataCsv(runid='138536A01', yname='gmaEPM', xname='rho', scan_num=784, legend='0, fixed Norm'),


        # # 8919, 4, 6.66
        # PlotDataCsv(runid='138536A01', yname='gmaEPM', xname='rho', scan_num=782, legend='def, no Norm'),
        # # 8156, 6, 6.27 -- NO GUESS
        # PlotDataCsv(runid='138536A01', yname='gmaEPM', xname='rho', scan_num=783, legend='0, no Norm'),

        # PlotDataCsv(runid='138536A01', yname='gaveEPM', xname='rho', scan_num=766, legend='Default Guess'),
        # PlotDataCsv(runid='138536A01', yname='gaveEPM', xname='rho', scan_num=765, legend='Increased Guess'),
        # PlotDataCsv(runid='138536A01', yname='gmaEPM', xname='rho', scan_num=759, legend='0.1 Increased Guess'),
        # PlotDataCsv(runid='138536A01', yname='gaveEPM', xname='rho', scan_num=754, legend='Enormous Guess'),
        # PlotDataCsv(runid='120982A09', yname='gmaW20i', xname='rho', scan_num=12006, legend='cubic'),
        # PlotDataCsv(runid='120982A09', yname='gmaW20i', xname='rho', scan_num=12011, legend='quadratic'),

        # PlotDataCsv(runid='120968A02', yname='kyrhosDBM', xname='rho', scan_num=48, legend='100 loops'),
        # PlotDataCsv(runid='120968A02', yname='kyrhosDBM', xname='rho', scan_num=51, legend='10,000 loops'),
        # PlotDataCsv(runid='120982A09', yname='xteETG', xname='rho', scan_num=12012, legend='quadratic'),

        # PlotDataCsv(runid='129041A10', yname='xteDBM', xname='rho', scan_num=115, legend='exp 10'),
        # PlotDataCsv(runid='129041A10', yname='xteDBM', xname='rho', scan_num=116, legend='exp 20'),
        # PlotDataCsv(runid='129041A10', yname='xteDBM', xname='rho', scan_num=117, legend='exp 50'),
        # PlotDataCsv(runid='129041A10', yname='xteDBM', xname='rho', scan_num=118, legend='exp 100'),

        # PlotDataCsv(runid='129041A10', yname='xteMTM', xname='rho', scan_num=513, legend='converged'),
        # PlotDataCsv(runid='129041A10', yname='xteMTM', xname='rho', scan_num=500, legend='linear 250'),
        # PlotDataCsv(runid='129041A10', yname='xteMTM', xname='rho', scan_num=501, legend='linear 500'),
        # PlotDataCsv(runid='129041A10', yname='xteMTM', xname='rho', scan_num=502, legend='linear 1000'),
        # PlotDataCsv(runid='129041A10', yname='xteMTM', xname='rho', scan_num=504, legend='linear 5000'),
        # PlotDataCsv(runid='129041A10', yname='xteMTM', xname='rho', scan_num=513, legend='converged'),
        # PlotDataCsv(runid='129041A10', yname='xteMTM', xname='rho', scan_num=503, legend=2000),
        # PlotDataCsv(runid='129041A10', yname='xteMTM', xname='rho', scan_num=505, legend='exp 250'),
        # PlotDataCsv(runid='129041A10', yname='xteMTM', xname='rho', scan_num=506, legend='exp 500'),
        # PlotDataCsv(runid='129041A10', yname='xteMTM', xname='rho', scan_num=507, legend='exp 1000'),
        # PlotDataCsv(runid='129041A10', yname='xteMTM', xname='rho', scan_num=513, legend='converged'),
        # PlotDataCsv(runid='129041A10', yname='xteMTM', xname='rho', scan_num=510, legend='exp 50'),
        # PlotDataCsv(runid='129041A10', yname='xteMTM', xname='rho', scan_num=511, legend='exp 100'),
        # PlotDataCsv(runid='129041A10', yname='xteMTM', xname='rho', scan_num=512, legend='exp 200'),
        # PlotDataCsv(runid='129041A10', yname='xteMTM', xname='rho', scan_num=513, legend='linear 100k'),

        # PlotDataCsv(runid='129041A10', yname='xteMTM', xname='rho', scan_num=513, legend='converged'),
        # PlotDataCsv(runid='129041A10', yname='xteMTM', xname='rho', scan_num=509, legend='10000'),
        # PlotDataCsv(runid='129041A10', yname='xteMTM', xname='rho', scan_num=502, legend='linear 1000'),
        # PlotDataCsv(runid='129041A10', yname='xteMTM', xname='rho', scan_num=503, legend='linear 2000'),
        # PlotDataCsv(runid='129041A10', yname='xteMTM', xname='rho', scan_num=511, legend='exp 100'),

        # PlotDataCsv(runid='120982A09', yname='fvp', xname='rho', scan_num=38, legend=r'$\ \ \,$VPOL'),
        # PlotDataCsv(runid='120982A09', yname='fvp', xname='rho', scan_num=39, legend=r'$-$VPOL'),

        # PlotDataCsv(runid='129016A03', yname='xte', xname='rmina', scan_num=6),
        # PlotDataCsv(runid='129016A04', yname='xte', xname='rmina', scan_num=18),
        # PlotDataCsv(runid='16325T10', yname='xtiW20', xname='rho', scan_num=13200, scan_factor=9.5),
        # PlotDataCsv(runid='16325T10', yname='xtiW20', xname='rho', scan_num=13201, scan_factor=9.5),
        
        # PlotDataCsv(runid='16325T10', yname='xtiW20', xname='rho', scan_num=49,), #original, ifort, s
        # PlotDataCsv(runid='16325T10', yname='xtiW20', xname='rho', scan_num=50,), #opt, ifort, s
        # PlotDataCsv(runid='16325T10', yname='xtiW20', xname='rho', scan_num=51,), #original, ifort, nos
        # PlotDataCsv(runid='16325T10', yname='xtiW20', xname='rho', scan_num=52,), #opt, ifort, nos
        # PlotDataCsv(runid='16325T10', yname='xtiW20', xname='rho', scan_num=54,), #opt2, ifort, nos

        # PlotDataCsv(runid='120968A02', yname='gmaDBM', xname='rho', scan_num=13216,),
        # PlotDataCsv(runid='120968A02', yname='gmaDBM', xname='rho', scan_num=13214,),
        # PlotDataCsv(runid='120968A02', yname='gmaDBM', xname='rho', scan_num=52,),

 
        # PlotDataCsv(runid='121123K55', yname='xteMTM', xname='rho', scan_num=9,  legend=r'$n_{_\mathrm{L}} = 1000$'),
        # PlotDataCsv(runid='121123K55', yname='xteMTM', xname='rho', scan_num=10, legend=r'$n_{_\mathrm{L}} = 2000$'),
        # PlotDataCsv(runid='121123K55', yname='xteMTM', xname='rho', scan_num=11, legend=r'$n_{_\mathrm{L}} = 4000$'),
        # title_override=r'Linear $k_y\rho_s$ Increments',
        # allow_title_runid=0,
        # allow_title_time=0,
        # ymax=9,

        # PlotDataCsv(runid='121123K55', yname='xteMTM', xname='rho', scan_num=12, legend=r'$n_{_\mathrm{E}} = 50$'),
        # PlotDataCsv(runid='121123K55', yname='xteMTM', xname='rho', scan_num=13, legend=r'$n_{_\mathrm{E}} = 100$'),
        # PlotDataCsv(runid='121123K55', yname='xteMTM', xname='rho', scan_num=14, legend=r'$n_{_\mathrm{E}} = 200$'),
        # title_override=r'Exponential $k_y\rho_s$ Increments',
        # allow_title_runid=0,
        # allow_title_time=0,
        # ymax=9,

        # PlotDataCsv(runid='121123K55', yname='xteMTM', xname='rho', scan_num=8, legend=r'Converged'),
        # PlotDataCsv(runid='121123K55', yname='xteMTM', xname='rho', scan_num=10, legend=r'$n_{_\mathrm{L}} = 2000$'),
        # PlotDataCsv(runid='121123K55', yname='xteMTM', xname='rho', scan_num=13, legend=r'$n_{_\mathrm{E}} = 100\,$'),
        # title_override=r'Linear vs. Exponential',
        # allow_title_runid=0,
        # allow_title_time=0,
        # ymin=6.2, ymax=8.1, xmin=0.8, xmax=0.93,

        # PlotDataCsv(runid='121123K55', yname='xteMTM', xname='rho', scan_num=10, legend=r'$n = 100\ \,$ (Exp.)'),
        # PlotDataCsv(runid='121123K55', yname='xteMTM', xname='rho', scan_num=11, legend=r'$n = 200\ \,$ (Exp.)'),

        # # NEW NSTX COLLISIONALITY COMPARISON (9.0.4)
        # PlotDataCsv(runid='120968A02', yname='gmaMTM', xname='rmina', scan_num=13300, legend=r'High'),
        # PlotDataCsv(runid='120982A09', yname='gmaMTM', xname='rmina', scan_num=13300, legend=r'Low'),
        # xmax=0.8,

   
        # PlotDataCdf(runid='138536W03', yname='ti', xname='rho', zval=0.755, legend=r'MMM'),
        # PlotDataCdf(runid='138536A01', yname='ti', legend=r'Analysis', zval=0.755, source='mmm'),
        # xmax=1,

        # PlotDataCdf(runid='138536W03', yname='xki', xname='rho', zval=0.755, legend=r'$\chi_{\rm i, tot}$'),
        # PlotDataCdf(runid='138536W03', yname='xkimmm', xname='rho', zval=0.755, legend=r'$\chi_{\rm i, MMM}$'),
        # PlotDataCdf(runid='138536W03', yname='xkemmm', xname='rho', zval=0.755, legend=r'$\chi_{\rm e, MMM}$'),
        # xmax=1, ymin=0, ymax=35,


        # PlotDataCsv(runid='121123K55', yname='xteMTM', xname='rho', scan_num=10, legend=r'$\mathtt{Exp.}$ 200'),
        # PlotDataCsv(runid='121123K55', yname='xteMTM', xname='rho', scan_num=11, legend=r'$\mathtt{Lin.}$ 4000'),
        # PlotDataCsv(runid='121123K55', yname='xteMTM', xname='rho', scan_num=12, legend=r'$\mathtt{Converged}$'),
        # PlotDataCsv(runid='121123K55', yname='xteMTM', xname='rho', scan_num=13, legend=r'$\mathtt{Converged}$'),
        
        # PlotDataCsv(runid='138536A01', yname='xteETGM', xname='rho',  scan_num=49),
        # PlotDataCsv(runid='138536A01', yname='xte2ETGM', xname='rho', scan_num=49),
        # PlotDataCsv(runid='138536A01', yname='xteETGM', xname='rho',  scan_num=81),
        # PlotDataCsv(runid='138536A01', yname='xte2ETGM', xname='rho', scan_num=81),
        # PlotDataCsv(runid='138536A01', yname='xteETGM', xname='rho',  scan_num=84),
        # PlotDataCsv(runid='138536A01', yname='xte2ETGM', xname='rho', scan_num=84),

        # PlotDataCsv(runid='129016A03', yname='gmaETGM', xname='kyrhosETGM', scan_num=42, rho_value=0.6),
        # # PlotDataCsv(runid='138536A01', yname='gmaETGM', xname='rho', scan_num=99),

        # PlotDataCsv(runid='120968A02', yname='xteETGM', xname='rho',  scan_num=40),
        # PlotDataCsv(runid='120968A02', yname='xteETGM', xname='rho', scan_num=43),


        # PlotDataCsv(runid='138536A01', yname='gmaETGM', xname='ai', scan_num=304, rho_value=0.3, legend=r'kyrhos scan'),
        # PlotDataCsv(runid='138536A01', yname='gmaETGM', xname='ai', scan_num=305, rho_value=0.3, legend=r'kyrhos = 8'),
        # PlotDataCsv(runid='138536A01', yname='gmaETGM', xname='ai', scan_num=306, rho_value=0.3, legend=r'kyrhos = 16'),
        # PlotDataCsv(runid='138536A01', yname='gmaETGM', xname='ai', scan_num=307, rho_value=0.3),



        # PlotDataCsv(runid='138536A01', yname='xtiDBM', xname='rho',  scan_num=5004),
        # PlotDataCsv(runid='138536A01', yname='xti2DBM', xname='rho', scan_num=5004),
        # PlotDataCsv(runid='138536A01', yname='xteDBM', xname='rho',  scan_num=5004),
        # PlotDataCsv(runid='138536A01', yname='xte2DBM', xname='rho', scan_num=5004),
        # PlotDataCsv(runid='138536A01', yname='xdeDBM', xname='rho',  scan_num=5009),
        # PlotDataCsv(runid='138536A01', yname='xde2DBM', xname='rho', scan_num=5009),
        # PlotDataCsv(runid='138536A01', yname='satDBM', xname='rho', scan_num=5006),
        # PlotDataCsv(runid='138536A01', yname='satDBM', xname='rho', scan_num=5007),

        # PlotDataCsv(runid='129041A10', yname='xteDBM', xname='rho',  scan_num=5003),
        # PlotDataCsv(runid='129041A10', yname='xte2DBM', xname='rho', scan_num=5003),
        # PlotDataCsv(runid='129041A10', yname='xtiDBM', xname='rho',  scan_num=5002),
        # PlotDataCsv(runid='129041A10', yname='xti2DBM', xname='rho', scan_num=5002),
        # PlotDataCsv(runid='129041A10', yname='xdeDBM', xname='rho',  scan_num=5008),
        # PlotDataCsv(runid='129041A10', yname='xde2DBM', xname='rho', scan_num=5008),
        # PlotDataCsv(runid='129041A10', yname='satDBM', xname='rho', scan_num=5006),
        # PlotDataCsv(runid='129041A10', yname='satDBM', xname='rho', scan_num=5007),


        # PlotDataCsv(runid='120982A09', yname='xtiDBM', xname='rho',  scan_num=5003),
        # PlotDataCsv(runid='120982A09', yname='xti2DBM', xname='rho', scan_num=5003),
        # PlotDataCsv(runid='120982A09', yname='xteDBM', xname='rho',  scan_num=5003),
        # PlotDataCsv(runid='120982A09', yname='xte2DBM', xname='rho', scan_num=5003),
        # PlotDataCsv(runid='120982A09', yname='xdeDBM', xname='rho',  scan_num=5009),
        # PlotDataCsv(runid='120982A09', yname='xde2DBM', xname='rho', scan_num=5009),

        # PlotDataCsv(runid='120968A02', yname='xteDBM', xname='rho',  scan_num=5002),
        # PlotDataCsv(runid='120968A02', yname='xte2DBM', xname='rho', scan_num=5002),
        # PlotDataCsv(runid='120968A02', yname='xtiDBM', xname='rho',  scan_num=5001),
        # PlotDataCsv(runid='120968A02', yname='xti2DBM', xname='rho', scan_num=5001),
        # PlotDataCsv(runid='120968A02', yname='xdeDBM', xname='rho',  scan_num=5009),
        # PlotDataCsv(runid='120968A02', yname='xde2DBM', xname='rho', scan_num=5009),





        # PlotDataCsv(runid='129041A10', yname='gmaDBM', xname='kyrhosDBM', rho_value=0.6, scan_num=26),
        # PlotDataCsv(runid='129041A10', yname='gmaDBM', xname='kyrhosDBM', rho_value=0.7, scan_num=26),
        # PlotDataCsv(runid='129041A10', yname='gmaDBM', xname='kyrhosDBM', rho_value=0.8, scan_num=26),
        # PlotDataCsv(runid='129041A10', yname='gmaDBM', xname='kyrhosDBM', rho_value=0.9, scan_num=26),

        # PlotDataCsv(runid='120968A02', yname='xti2DBM', xname='rho', scan_num=24, legend='wexb off'),
        # PlotDataCsv(runid='120968A02', yname='xti2DBM', xname='rho', scan_num=25, legend='wexb on'),
        # PlotDataCsv(runid='120968A02', yname='xteDBM', xname='rho', scan_num=19),
        # PlotDataCsv(runid='120968A02', yname='xteDBM', xname='rho', scan_num=17),
        # PlotDataCsv(runid='120968A02', yname='xteDBM', xname='rho', scan_num=17),

        # PlotDataCsv(runid='120968A02', yname='xdeDBM',  xname='rho', scan_num=31),
        # PlotDataCsv(runid='120968A02', yname='xde2DBM', xname='rho', scan_num=31),
        # PlotDataCsv(runid='120982A09', yname='xdeDBM',  xname='rho', scan_num=36),
        # PlotDataCsv(runid='120982A09', yname='xde2DBM', xname='rho', scan_num=36),
        # PlotDataCsv(runid='132411T02', yname='xdeDBM',  xname='rho', scan_num=50),
        # PlotDataCsv(runid='132411T02', yname='xde2DBM', xname='rho', scan_num=50),
        # PlotDataCsv(runid='138536A01', yname='xdeDBM',  xname='rho', scan_num=67),
        # PlotDataCsv(runid='138536A01', yname='xde2DBM', xname='rho', scan_num=67),
        # PlotDataCsv(runid='118341T54', yname='xdeDBM',  xname='rho', scan_num=519),
        # PlotDataCsv(runid='118341T54', yname='xde2DBM', xname='rho', scan_num=519),

        # PlotDataCsv(runid='138536A01', yname='gmaEPM', xname='rho', scan_num=338),
        # PlotDataCsv(runid='138536A01', yname='gmaEPM', xname='rho', scan_num=341),

        # PlotDataCsv(runid='132411T02', yname='ti', xname='rho', scan_num=16),
        # PlotDataCsv(runid='132411T02', yname='ti', xname='rho', scan_num=17),

        # PlotDataCsv(runid='132411T02', yname='xtiW20',  xname='rho', scan_num=23),
        # PlotDataCsv(runid='132411T02', yname='xtiW20',  xname='rho', scan_num=24),
        # PlotDataCsv(runid='132411T02', yname='xtiDBM',  xname='rho', scan_num=24),
        # PlotDataCsv(runid='132411T02', yname='xti2DBM', xname='rho', scan_num=24),
        # ymax=4,

        # PlotDataCsv(runid='132411T02', yname='xtiDBM', xname='rho', scan_num=37),
        # PlotDataCsv(runid='132411T02', yname='xtiDBM', xname='rho', scan_num=38),
        # PlotDataCsv(runid='132411T02', yname='xtiDBM', xname='rho', scan_num=39),
        # PlotDataCsv(runid='132411T02', yname='xtiDBM', xname='rho', scan_num=40),
        # PlotDataCsv(runid='132411T02', yname='xtiDBM', xname='rho', scan_num=41),
        # PlotDataCsv(runid='132411T02', yname='xtiDBM', xname='rho', scan_num=42),
        # PlotDataCsv(runid='132411T02', yname='gmaDBM',  xname='rho', scan_num=43),

        # PlotDataCsv(runid='132411T02', yname='xteW20',  xname='rho', scan_num=24),
        # PlotDataCsv(runid='132411T02', yname='xteDBM',  xname='rho', scan_num=24),
        # PlotDataCsv(runid='132411T02', yname='xte2DBM', xname='rho', scan_num=24),
        # PlotDataCsv(runid='132411T02', yname='xteETG',  xname='rho', scan_num=24),
        # PlotDataCsv(runid='132411T02', yname='xteETGM', xname='rho', scan_num=24),
        # PlotDataCdf(runid='132411T02', yname='condewnc', xname='rho',zval=0.56),
        # ymax=10,

        # PlotDataCsv(runid='132411T02', yname='xteDBM', xname='rho', scan_num=9),
        # PlotDataCsv(runid='132411T02', yname='xteW20', xname='rho', scan_num=9),
        # PlotDataCsv(runid='132411T02', yname='xteETGM', xname='rho',scan_num=9),
        # PlotDataCsv(runid='132411T02', yname='xtiDBM', xname='rho',  scan_num=6),
        # PlotDataCsv(runid='132411T02', yname='xti2DBM', xname='rho', scan_num=6),

        # PlotDataCsv(runid='101381T31', yname='gmaDBM', xname='kyrhosDBM', scan_num=9),
        # PlotDataCsv(runid='101381T31', yname='gmaDBM', xname='kyrhosDBM', scan_num=9),
        # PlotDataCsv(runid='101381T31', yname='gmaDBM', xname='kyrhosDBM', scan_num=9),
        # PlotDataCsv(runid='120982A09', yname='gmaDBM', xname='kyrhosDBM', rho_value=0.8, scan_num=31, legend='Ti/Te = 1'),


        # PlotDataCsv(runid='129016A04', yname='xteMTM', scan_num=23),

        # PlotDataCdf(runid='129016Q34', yname='walltime', xname='time', zval=0.5, timeplot=True, legend='08 Processors'),
        # PlotDataCdf(runid='129016Q36', yname='walltime', xname='time', zval=0.5, timeplot=True, legend='16 Processors'),
        # PlotDataCdf(runid='129016Q35', yname='walltime', xname='time', zval=0.5, timeplot=True, legend='32 Processors'),

        # PlotDataCdf(runid='129016Q32', yname='walltime', xname='time', zval=0.5, timeplot=True, legend='Models Disabled'),
        # PlotDataCdf(runid='129016Q33', yname='walltime', xname='time', zval=0.5, timeplot=True, legend='Models Enabled'),

        
        # PlotDataCdf(runid='129016Q50', yname='walltime', xname='time', zval=0.5, timeplot=True, legend='v9.0.1 Enabled'),
        # PlotDataCdf(runid='129016Q51', yname='walltime', xname='time', zval=0.5, timeplot=True, legend='v9.0.1 Disabled'),

        # PlotDataCdf(runid='129016W50', yname='walltime', xname='time', zval=0.5, timeplot=True, legend='v9.0.6 Enabled'),
        # PlotDataCdf(runid='129016W51', yname='walltime', xname='time', zval=0.5, timeplot=True, legend='v9.0.6 Disabled'),
        # xmax=0.35

        # PlotDataCdf(runid='129016Q69', yname='walltime', xname='time', zval=0.5, timeplot=True, legend='v8.2.3 Enabled'),
        # PlotDataCdf(runid='129016Q70', yname='walltime', xname='time', zval=0.5, timeplot=True, legend='v8.2.3 Disabled'),
        
        # PlotDataCdf(runid='129016Q77', yname='walltime', xname='time', zval=0.5, timeplot=True, legend='v8.2.3 Enabled'),
        # PlotDataCdf(runid='129016Q70', yname='walltime', xname='time', zval=0.5, timeplot=True, legend='v8.2.3 Disabled'),

        # PlotDataCdf(runid='129016Q77', yname='vcz', xname='time', zval=0.5, timeplot=True, legend='v8.2.3'),

        # Sat Expo 2 vs 1
        # PlotDataCdf(runid='129016A03', yname='te', xname='rho', zval=0.415, legend='Experiment'),
        # PlotDataCdf(runid='129016Q58', yname='te', xname='rho', zval=0.415, legend=r'Sat Expo = 2'),
        # PlotDataCdf(runid='129016Q67', yname='te', xname='rho', zval=0.415, legend=r'Sat Expo = 1'),

        # PlotDataCdf(runid='129016A03', yname='te', xname='rho', zval=0.3, legend='Experiment'),
        # PlotDataCdf(runid='129016Q51', yname='te', xname='rho', zval=0.3, legend='MMM Off'),
        # PlotDataCdf(runid='129016Q58', yname='te', xname='rho', zval=0.3, legend=r'$\chi_{\rm e, etgm}$'),
        # PlotDataCdf(runid='129016Q59', yname='te', xname='rho', zval=0.3, legend=r'$_{{^\sum}}\chi_{\rm e, etgm}$'),

        # PlotDataCdf(runid='129016A03', yname='te', xname='rho', zval=0.4, legend='Experiment'),
        # PlotDataCdf(runid='129016Q51', yname='te', xname='rho', zval=0.4, legend='MMM Off'),
        # PlotDataCdf(runid='129016Q58', yname='te', xname='rho', zval=0.4, legend=r'$\chi_{\rm e, etgm}$'),
        # PlotDataCdf(runid='129016Q63', yname='te', xname='rho', zval=0.4, legend=r'2$_{{^\sum}}\chi_{\rm e, etgm}$'),

        # PlotDataCdf(runid='129016A03', yname='xkemmm07', xname='rho', zval=0.4, legend='Experiment'),
        # PlotDataCdf(runid='129016Q51', yname='xkemmm07', xname='rho', zval=0.4, legend='MMM Off'),
        # PlotDataCdf(runid='129016Q58', yname='xkemmm07', xname='rho', zval=0.4, legend=r'$\chi_{\rm e, etgm}$'),
        # PlotDataCdf(runid='129016Q63', yname='xkemmm07', xname='rho', zval=0.4, legend=r'2$_{{^\sum}}\chi_{\rm e, etgm}$'),

        # PlotDataCdf(runid='129016A03', yname='te', xname='rho', zval=0.415, legend='Experiment'),
        # PlotDataCdf(runid='129016Q51', yname='te', xname='rho', zval=0.415, legend='MMM Off'),
        # PlotDataCdf(runid='129016Q60', yname='te', xname='rho', zval=0.415, legend=r'$\chi_{\rm e, etgm}^*$'),
        # PlotDataCdf(runid='129016Q61', yname='te', xname='rho', zval=0.415, legend=r'$_{{^\sum}}\chi_{\rm e, etgm}^*$'),

        # PlotDataCdf(runid='129016Q58', yname='xkemmm07', xname='rho', zval=0.3, legend=r'$\chi_{\rm e, etgm}$'),
        # PlotDataCdf(runid='129016Q59', yname='xkemmm07', xname='rho', zval=0.3, legend=r'$_{{^\sum}}\chi_{\rm e, etgm}$'),
        # PlotDataCdf(runid='129016Q60', yname='xkemmm07', xname='rho', zval=0.3, legend=r'$\chi_{\rm e, etgm}^*$'),
        # PlotDataCdf(runid='129016Q61', yname='xkemmm07', xname='rho', zval=0.3, legend=r'$_{{^\sum}}\chi_{\rm e, etgm}^*$'),

        # ETGM VS MTM
        # PlotDataCdf(runid='129016A03', yname='te', xname='rho', zval=0.3, legend='Experiment'),
        # PlotDataCdf(runid='129016Q51', yname='te', xname='rho', zval=0.3, legend='MMM Off'),
        # PlotDataCdf(runid='129016Q58', yname='te', xname='rho', zval=0.3, legend=r'$\chi_{\rm e, etgm}$'),
        # PlotDataCdf(runid='129016Q64', yname='te', xname='rho', zval=0.3, legend=r'$\chi_{\rm e, mtm}$'),

        # MTM OLD vs NEW
        # PlotDataCdf(runid='129016Q69', yname='xkemtm', xname='rho', zval=0.4, legend=r'OLD'),
        # PlotDataCdf(runid='129016Q64', yname='xkemtm', xname='rho', zval=0.4, legend=r'NEW'),

        # MTM OLD vs NEW
        # PlotDataCdf(runid='129016Q75', yname='xkidrbm', xname='xb', zval=0.31, source=r'raw'),
        # PlotDataCdf(runid='129016Q79', yname='xkemmm07', xname='rho', zval=0.4, legend=r'OLD'),
        # PlotDataCdf(runid='129016Q64', yname='xkemtm', xname='rho', zval=0.4, legend=r'NEW'),

        # PlotDataCdf(runid='129016Q64', yname='xkemtm', xname='rho', zval=0.3, legend=r'$\chi_{\rm e, mtm}$'),


        # xteETGM: TRANSP vs Stand Alone with wexb = 0
        # PlotDataCdf(runid='129016Q65', yname='xkemmm07', xname='rho', zval=0.4, legend=r'TRANSP'),
        # PlotDataCsv(runid='129016Q65', yname='xteETGM', xname='rho', scan_num=1, legend='Stand Alone'),

        # # xte2ETGM: TRANSP vs Stand Alone with wexb = 0
        # PlotDataCdf(runid='129016Q66', yname='xkemmm07', xname='rho', zval=0.4, legend=r'TRANSP'),
        # PlotDataCsv(runid='129016Q66', yname='xte2ETGM', xname='rho', scan_num=2, legend='Stand Alone (negative gBu)'),


        # PlotDataCsv(runid='129016Q50', yname='xtiW20', xname='rho', scan_num=12, legend='default'),
        # PlotDataCsv(runid='129016Q50', yname='xtiW20', xname='rho', scan_num=13, legend='btor = 0'),
        # PlotDataCsv(runid='129016Q50', yname='xtiW20', xname='rho', scan_num=14, legend='ne = 1e16'),
        # PlotDataCsv(runid='129016Q50', yname='xtiW20', xname='rho', scan_num=15, legend='both'),


        # PlotDataCsv(runid='129016A04', yname='xtiW20', xname='rho', scan_num=68,),
        # PlotDataCsv(runid='129016A04', yname='xdeW20', xname='rho', scan_num=68,),
        # PlotDataCsv(runid='129016A04', yname='xteW20', xname='rho', scan_num=68,),
        # PlotDataCsv(runid='129016A04', yname='xdz', xname='rho', scan_num=68,),
        # PlotDataCsv(runid='129016A04', yname='xvt', xname='rho', scan_num=68,),
        # PlotDataCsv(runid='129016A04', yname='xvp', xname='rho', scan_num=68,),

        # PlotDataCsv(runid='129016A04', yname='xtiDBM', xname='rho', scan_num=67,),
        # PlotDataCsv(runid='129016A04', yname='xdeDBM', xname='rho', scan_num=67,),
        # PlotDataCsv(runid='129016A04', yname='xteDBM', xname='rho', scan_num=67,),
        # PlotDataCsv(runid='129016A04', yname='xti2DBM', xname='rho', scan_num=68,),
        # PlotDataCsv(runid='129016A04', yname='xde2DBM', xname='rho', scan_num=68,),
        # PlotDataCsv(runid='129016A04', yname='xte2DBM', xname='rho', scan_num=68,),

        # PlotDataCsv(runid='129016A04', yname='xteETGM', xname='rho',  scan_num=68,),
        # PlotDataCsv(runid='129016A04', yname='xte2ETGM', xname='rho', scan_num=68,),
        # PlotDataCsv(runid='129016A04', yname='xteETGM', xname='rho',  scan_num=67,),
        # PlotDataCsv(runid='129016A04', yname='xte2ETGM', xname='rho', scan_num=67,),

        # PlotDataCsv(runid='129016A04', yname='xteMTM', xname='rho',  scan_num=67,),

        # PlotDataCdf(runid='129016A03', yname='ti', xname='rho', zval=0.389),
        # PlotDataCdf(runid='129016Z11', yname='ti', xname='rho', zval=0.389),
        # PlotDataCdf(runid='129016A03', yname='ti', xname='rho', zval=0.39, legend='Experiment'),
        # PlotDataCdf(runid='129016Z11', yname='ti', xname='rho', zval=0.4, legend='MMM On'),
        
        # PlotDataCdf(runid='129016W47', yname='te', xname='rho', zval=0.4, legend='DBM Failure'),
        # PlotDataCdf(runid='129016Q50', yname='ti', xname='rho', zval=0.4, legend='MMM Off'),

        # PlotDataCdf(runid='129016Z18', yname='wexb', xname='rho', zval=0.32, legend='MMM 8in9 '),
        # PlotDataCdf(runid='129016Z19', yname='ti', xname='rho', zval=0.32, legend='MMM 9'),
        # PlotDataCdf(runid='129016Z15', yname='xkemmm', xname='rho', zval=0.34, legend='MMM 8'),
        # PlotDataCdf(runid='129016Z21', yname='xkemmm', xname='rho', zval=0.34, legend='MMM 9 Disabled'),
        # PlotDataCdf(runid='129016Z20', yname='ti', xname='rho', zval=0.31, legend='MMM 8 Disabled'),
        # PlotDataCdf(runid='129016Z24', yname='ti', xname='rho', zval=0.32, legend=r'MMM v8 (Pshare), $+\chi$'),
        # PlotDataCdf(runid='129016Z25', yname='wexb', xname='rho', zval=0.3, legend=r'MMM v8 (Pshare), $\pm\chi$'),
        # PlotDataCdf(runid='129016A03', yname='ti', xname='rho', zval=0.3, legend='Experiment'),
        # title_override='129016, 0.3s',

        # PlotDataCdf(runid='129016Q69', yname='wexb', xname='rho', zval=0.32, legend=r'MMM v8 (Pshare), $+\chi$'), # no pphi
        # PlotDataCdf(runid='129016Z27', yname='te', xname='rho', zval=0.32, legend=r'MMM v8 (Pshare), $+\chi$'), # original TR.DAT
        # PlotDataCdf(runid='129016Z28', yname='te', xname='rho', zval=0.32, legend=r'W20 only (Pshare), $+\chi$'), # original TR.DAT
        # PlotDataCdf(runid='129016A03', yname='ti', xname='rho', zval=0.32, legend='Experiment'),

        # Showing ETG at edge affects wexb
        # PlotDataCdf(runid='129016Z30', yname='xkimmm', xname='rho', zval=0.32, legend=r'Axial + Edge Active + ETG'),
        # PlotDataCdf(runid='129016Z31', yname='xkimmm', xname='rho', zval=0.32, legend=r'Axial + Edge Active'),
        # PlotDataCdf(runid='129016Z33', yname='xkimmm', xname='rho', zval=0.32, legend=r'Confinement Only'), 
        
        # PlotDataCdf(runid='120968A02', yname='bpol', zval=0.5, legend='CDF', source='cdf'),
        # PlotDataCsv(runid='120968A02', yname='bpol', scan_num=74, legend=r'modmmm'),
        # PlotDataCsv(runid='120968A02', yname='bpol', scan_num=75, legend=r'pt$\_$mmm$\_$mod'),

        # PlotDataCdf(runid='120968A02', yname='shear', xname='rho', zval=0.5, legend='CDF', source='cdf'),
        # PlotDataCsv(runid='120968A02', yname='gti', xname='rho', scan_num=78, legend=r'interp, trad'),
        # PlotDataCsv(runid='120968A02', yname='gti', xname='rho', scan_num=79, legend=r'interp, interp'),
        # PlotDataCsv(runid='120968A02', yname='gti', xname='rho', scan_num=80, legend=r'akima, trad'),
        # PlotDataCsv(runid='120968A02', yname='gti', xname='rho', scan_num=81, legend=r'akima, interp'),

        # PlotDataCsv(runid='120968A02', yname='gti', xname='rho', scan_num=78, legend=r'interp1d'),
        # PlotDataCsv(runid='120968A02', yname='gti', xname='rho', scan_num=80, legend=r'Akima'),
        # title_override='120968 (0.559s)',

        # PlotDataCdf(runid='120968W34', yname='xke', legend=r'$\chi_{\mathrm{e, total}}$', zval=0.559, source='mmm'),
        # PlotDataCdf(runid='120968W34', yname='condepr', legend=r'$\chi_{\mathrm{e, condepr}}$', zval=0.559, source='cdf'),
        # PlotDataCdf(runid='120968W34', yname='xkemmm',legend=r'$\chi_{\mathrm{e, mmm}}$', zval=0.559, source='cdf'),
        # PlotDataCdf(runid='120968W34', yname='xkeetgm',legend=r'$\chi_{\mathrm{e, etgm}}$', zval=0.559, source='mmm'),
        # PlotDataCdf(runid='120968W34', yname='xkepaleo', legend=r'$\chi_{\mathrm{e, paleo}}$', zval=0.559, source='cdf'),
        # PlotDataCdf(runid='120968W34', yname='xkemtm', legend=r'$\chi_{\mathrm{e, mtm}}$', zval=0.559, source='cdf'),
        # # PlotDataCdf(runid='120968W34', yname='xkew20', legend=r'$\chi_{\mathrm{e, w20}}$', zval=0.559, source='cdf'),
        # # PlotDataCdf(runid='120968W34', yname='condewnc', xname='rho', zval=0.559, source='cdf'),
        # title_override='120968', xmin=0.02,

        # PlotDataCdf(runid='120968W34', yname='xki', legend=r'$\chi_{\mathrm{i, total}}$', zval=0.559, source='mmm'),
        # PlotDataCdf(runid='120968W34', yname='condipr', legend=r'$\chi_{\mathrm{i, condipr}}$', zval=0.559, source='mmm'),
        # PlotDataCdf(runid='120968W34', yname='xkimmm', legend=r'$\chi_{\mathrm{i, mmm}}$', zval=0.559, source='mmm'),
        # PlotDataCdf(runid='120968W34', yname='condiwnc', legend=r'$\chi_{\mathrm{i, neo}}$', zval=0.559, source='mmm'),
        # PlotDataCdf(runid='120968W34', yname='xkiw20', legend=r'$\chi_{\mathrm{i, w20}}$', zval=0.559, source='cdf'),
        # # PlotDataCdf(runid='120968W34', yname='xkiw20', legend=r'$\chi_{\mathrm{i, w20}}$', zval=0.559, source='cdf'),
        # # PlotDataCdf(runid='120968W34', yname='condewnc', xname='rho', zval=0.559, source='cdf'),
        # title_override='120968', xmin=0.02,

        # PlotDataCdf(runid='120982W31', yname='xki', legend=r'$\chi_{\mathrm{i, total}}$', zval=0.559, source='mmm'),
        # PlotDataCdf(runid='120982W31', yname='condipr', legend=r'$\chi_{\mathrm{i, condipr}}$', zval=0.559, source='mmm'),
        # PlotDataCdf(runid='120982W31', yname='xkimmm', legend=r'$\chi_{\mathrm{i, mmm}}$', zval=0.559, source='mmm'),
        # PlotDataCdf(runid='120982W31', yname='condiwnc', legend=r'$\chi_{\mathrm{i, neo}}$', zval=0.559, source='mmm'),
        # PlotDataCdf(runid='120982W31', yname='xkiw20', legend=r'$\chi_{\mathrm{i, w20}}$', zval=0.559, source='cdf'),
        # # PlotDataCdf(runid='120968W34', yname='xkiw20', legend=r'$\chi_{\mathrm{i, w20}}$', zval=0.559, source='cdf'),
        # # PlotDataCdf(runid='120968W34', yname='condewnc', xname='rho', zval=0.559, source='cdf'),
        # title_override='120982', xmin=0.02,

        # PlotDataCdf(runid='120982W31', yname='xki', legend=r'$\chi_{\mathrm{i, total}}$', zval=0.559, source='mmm'),
        # PlotDataCdf(runid='120982W31', yname='condipr', legend=r'$\chi_{\mathrm{i, condipr}}$', zval=0.559, source='mmm'),
        # PlotDataCdf(runid='120982W31', yname='xkimmm', legend=r'$\chi_{\mathrm{i, mmm}}$', zval=0.559, source='mmm'),
        # PlotDataCdf(runid='120982W31', yname='condiwnc', legend=r'$\chi_{\mathrm{i, neo}}$', zval=0.559, source='mmm'),
        # PlotDataCdf(runid='120982W31', yname='fkch2', legend=r'$\chi_{\mathrm{i, fkch2}}$', zval=0.559, source='cdf'),
        # PlotDataCdf(runid='120982W31', yname='fkchh', legend=r'$\chi_{\mathrm{i, fkchh}}$', zval=0.559, source='cdf'),
        # PlotDataCdf(runid='120982W31', yname='fkchz', legend=r'$\chi_{\mathrm{i, fkchz}}$', zval=0.559, source='cdf'),
        # # PlotDataCdf(runid='120982W31', yname='xkiw20', legend=r'$\chi_{\mathrm{i, w20}}$', zval=0.559, source='cdf'),
        # # PlotDataCdf(runid='120968W34', yname='xkiw20', legend=r'$\chi_{\mathrm{i, w20}}$', zval=0.559, source='cdf'),
        # # PlotDataCdf(runid='120968W34', yname='condewnc', xname='rho', zval=0.559, source='cdf'),
        # title_override='120982', xmin=0.02,

        # PlotDataCdf(runid='18476T02', yname='xki', legend=r'$\chi_{\mathrm{i, total}}$', zval=7, source='mmm'),
        # PlotDataCdf(runid='18476T02', yname='condipr', legend=r'$\chi_{\mathrm{i, condipr}}$', zval=7, source='cdf'),
        # PlotDataCdf(runid='18476T02', yname='xkimmm', legend=r'$\chi_{\mathrm{i, mmm}}$', zval=7, source='cdf'),
        # PlotDataCdf(runid='18476T02', yname='condiwnc', legend=r'$\chi_{\mathrm{i, neo}}$', zval=7, source='cdf'),
        # # PlotDataCdf(runid='18476T02', yname='fkch2', legend=r'$\chi_{\mathrm{i, fkch2}}$', zval=0.559, source='cdf'),
        # # PlotDataCdf(runid='18476T02', yname='fkchh', legend=r'$\chi_{\mathrm{i, fkchh}}$', zval=0.559, source='cdf'),
        # # PlotDataCdf(runid='18476T02', yname='fkchz', legend=r'$\chi_{\mathrm{i, fkchz}}$', zval=0.559, source='cdf'),
        # # PlotDataCdf(runid='120982W31', yname='xkiw20', legend=r'$\chi_{\mathrm{i, w20}}$', zval=0.559, source='cdf'),
        # # PlotDataCdf(runid='120968W34', yname='xkiw20', legend=r'$\chi_{\mathrm{i, w20}}$', zval=0.559, source='cdf'),
        # # PlotDataCdf(runid='120968W34', yname='condewnc', xname='rho', zval=0.559, source='cdf'),
        # title_override='18476', xmin=0.02, ymax=6, xmax=0.8,

        # PlotDataCdf(runid='120968W34', yname='xki', legend=r'$\chi_{\mathrm{i, total}}$', zval=0.559, source='mmm'),
        # PlotDataCdf(runid='120968W34', yname='condipr', legend=r'$\chi_{\mathrm{i, condipr}}$', zval=0.559, source='cdf'),
        # PlotDataCdf(runid='120968W34', yname='xkimmm', legend=r'$\chi_{\mathrm{i, mmm}}$', zval=0.559, source='cdf'),
        # PlotDataCdf(runid='120968W34', yname='condiwnc', legend=r'$\chi_{\mathrm{i, neo}}$', zval=0.559, source='cdf'),
        # title_override='120968', xmin=0.02, xmax=0.8,

        # PlotDataCdf(runid='129016W16', yname='xkemmm',  zval=0.533, source='cdf'),
        # PlotDataCdf(runid='129016W16', yname='xkew20',  zval=0.533, source='cdf'),
        # PlotDataCdf(runid='129016W16', yname='xkeetgm', zval=0.533, source='mmm'),
        # PlotDataCdf(runid='129016W16', yname='xkemtm',  zval=0.533, source='cdf'),
        # PlotDataCdf(runid='129016W16', yname='xkedrbm',  zval=0.533, source='cdf'),
        # title_override='129016', xmin=0.02, xmax=0.8,

        # PlotDataCdf(runid='129016W12', yname='mmmtime', xname='time', legend='Default', source='mmm'),
        # PlotDataCdf(runid='129016W21', yname='mmmtime', xname='time', legend=r'$g \geq 1$', source='mmm'),
        # PlotDataCdf(runid='129016W22', yname='mmmtime', xname='time', legend=r'$g \geq 1$, 0 PT', source='mmm'),
        # title_override='129016',

        # PlotDataCdf(runid='129016W12', yname='mmmtime', xname='time', legend=r'9.0.7', source='mmm'),
        # PlotDataCdf(runid='129016W24', yname='mmmtime', xname='time', legend=r'9.0.9', source='mmm'),
        # PlotDataCdf(runid='129016W23', yname='mmmtime', xname='time', legend=r'9.0.9 $g \geq 1$', source='mmm'),
        # title_override='129016', 

        # PlotDataCdf(runid='120982A09', yname='ne', xname='rho', source='cdf'),
        # PlotDataCdf(runid='120982A09', yname='ne', xname='rho', source='mmm'),
        # PlotDataCdf(runid='120982A09', yname='ni', xname='rho', source='mmm'),
        # title_override='129016', 

        # PlotDataCdf(runid='120982A09', yname='nf', xname='rho', source='cdf'),
        # # PlotDataCdf(runid='120982A09', yname='nh', xname='rho', source='mmm'),
        # PlotDataCdf(runid='120982A09', yname='nz', xname='rho', source='mmm'),
        # title_override='120982A09', 

        # PlotDataCdf(runid='129016W12', yname='condepr', xname='rho', zval=0.5, source='cdf'),
        # PlotDataCdf(runid='129016W12', yname='nh0', xname='rho',   zval=0.5,  source='cdf'),
        # PlotDataCdf(runid='129016W12', yname='nd', xname='rho',   zval=0.5,  source='cdf'),
        # PlotDataCdf(runid='129016W12', yname='nt', xname='rho',   zval=0.5,  source='cdf'),
        # PlotDataCdf(runid='129016W12', yname='nhe3', xname='rho',   zval=0.5,  source='cdf'),
        # PlotDataCdf(runid='129016W12', yname='nhe4', xname='rho',   zval=0.5,  source='cdf'),
        # title_override='129016', 

        # PlotDataCdf(runid='120968A02', yname='bpol', zval=0.5, legend='cdf', source='cdf'),
        # PlotDataCdf(runid='120968A02', yname='bpol', zval=0.5, legend='mmm', source='mmm'),
        # title_override='120968A02', 

        # PlotDataCdf(runid='129016W25', yname='omega', zval=0.51, legend='9.0.7 Only Confinement', source='cdf'),
        # PlotDataCdf(runid='129016W26', yname='omega', zval=0.51, legend='9.0.7 All three regions', source='cdf'),
        # PlotDataCdf(runid='129016W13', yname='omega', zval=0.51, legend='Analysis', source='cdf'),
        # title_override='129016', 

        # PlotDataCdf(runid='147634T61', yname='gne', zval=2.53, legend='9.0.7 Only Confinement', source='mmm'),
        # PlotDataCdf(runid='129016W26', yname='omega', zval=0.51, legend='9.0.7 All three regions', source='cdf'),
        # PlotDataCdf(runid='129016W13', yname='omega', zval=0.51, legend='Analysis', source='cdf'),
        # title_override='129016', 

        # PlotDataCdf(runid='120968W34', yname='ti', legend=r'MMM', zval=0.51),
        # PlotDataCdf(runid='120968A02', yname='ti', legend=r'Analysis', zval=0.51),



        # ------------------------------------------------------------------------------- #


        # PlotDataCdf(runid='120968W34', yname='ti', xname='x', legend=r'MMM', zval=0.56, source='raw', ymult=1e-3),
        # PlotDataCdf(runid='120968A02', yname='ti', xname='x', legend=r'Analysis', zval=0.56, source='raw', ymult=1e-3),
        # title_override='120968 (W34, A02), t = 0.56$\,$s',
        # xmin=0, xmax=1, ymin=0, ymax=1, ylabel_override=r'$T_{\rm i}$ (keV)'

        # PlotDataCdf(runid='120968W34', yname='te', xname='x', legend=r'MMM',      zval=0.56, source='raw', ymult=1e-3),
        # PlotDataCdf(runid='120968A02', yname='te', xname='x', legend=r'Analysis', zval=0.56, source='raw', ymult=1e-3),
        # title_override='120968 (W34, A02), t = 0.56$\,$s',
        # xmin=0, xmax=1, ymin=0, ymax=1, ylabel_override=r'$T_{\rm e}$ (keV)'

        # PlotDataCdf(runid='120982W31', yname='ti', xname='x', legend=r'MMM',      zval=0.62, source='raw', ymult=1e-3),
        # PlotDataCdf(runid='120982A09', yname='ti', xname='x', legend=r'Analysis', zval=0.62, source='raw', ymult=1e-3),
        # title_override='120968 (W34, A02), t = 0.62$\,$s',
        # xmin=0, xmax=1, ymin=0, ymax=1.6, ylabel_override=r'$T_{\rm i}$ (keV)',
        # yticks=np.arange(0, 1.8, step=0.4)

        # PlotDataCdf(runid='120982W31', yname='te', xname='x', legend=r'MMM',      zval=0.62, source='raw', ymult=1e-3),
        # PlotDataCdf(runid='120982A09', yname='te', xname='x', legend=r'Analysis', zval=0.62, source='raw', ymult=1e-3),
        # title_override='120968 (W34, A02), t = 0.62$\,$s',
        # xmin=0, xmax=1, ymin=0, ymax=1, ylabel_override=r'$T_{\rm e}$ (keV)',
        # yticks=np.arange(0, 1.8, step=0.4)

        # PlotDataCdf(runid='138536W03', yname='ti', xname='x', legend=r'MMM', zval=0.755, source='raw', ymult=1e-3),
        # PlotDataCdf(runid='138536A01', yname='ti', xname='x', legend=r'Analysis', zval=0.755, source='raw', ymult=1e-3),
        # title_override='138536 (W03, A01), t = 0.755$\,$s',
        # xmin=0, xmax=1, ymin=0, ymax=1.2, ylabel_override=r'$T_{\rm i}$ (keV)'

        # PlotDataCdf(runid='138536W03', yname='te', xname='x', legend=r'MMM', zval=0.755, source='raw', ymult=1e-3),
        # PlotDataCdf(runid='138536A01', yname='te', xname='x', legend=r'Analysis', zval=0.755, source='raw', ymult=1e-3),
        # title_override='138536 (W03, A01), t = 0.755$\,$s',
        # xmin=0, xmax=1, ymin=0, ymax=1.2, ylabel_override=r'$T_{\rm e}$ (keV)'
  
        # PlotDataCdf(runid='138536W03', yname='condipr', xname='x', legend=r'$\chi_{\rm i, tot}$', zval=0.755, source='raw', ymult=1e-4),
        # PlotDataCdf(runid='138536W03', yname='xkimmm', xname='x',  legend=r'$\chi_{\rm i, MMM}$', zval=0.755, source='raw', ymult=1e-4),
        # PlotDataCdf(runid='138536W03', yname='xkemmm', xname='x',  legend=r'$\chi_{\rm e, MMM}$', zval=0.755, source='raw', ymult=1e-4),
        # title_override='138536 (W03), t = 0.755$\,$s',
        # xmin=0, xmax=1, ymin=0, ylabel_override=r'(m$^2$/s)'

        # PlotDataCdf(runid='120968W34', yname='condipr', xname='x', legend=r'$\chi_{\rm i, tot}$', zval=0.51, source='raw', ymult=1e-4),
        # PlotDataCdf(runid='120968W34', yname='xkimmm', xname='x', legend=r'$\chi_{\rm i, MMM}$', zval=0.51, source='raw', ymult=1e-4),
        # PlotDataCdf(runid='120968W34', yname='xkemmm', xname='x', legend=r'$\chi_{\rm e, MMM}$', zval=0.51, source='raw', ymult=1e-4),
        # title_override=r'120968 (W34), t = 0.51$\,$s',
        # xmin=0, xmax=1, ymin=0, ylabel_override=r'(m$^2$/s)'


        ## FIG 10

        # PlotDataCdf(runid='120982W31', yname='ti', xname='x', legend=r'MMM',      zval=0.62, source='raw', ymult=1e-3),
        # PlotDataCdf(runid='120982A09', yname='ti', xname='x', legend=r'Analysis', zval=0.62, source='raw', ymult=1e-3),
        # title_override=r'120982 (W31, A09), t = 0.62$\,$s',
        # xmin=0, xmax=1, ymin=0, ymax=1.6, ylabel_override=r'$T_{\rm i}$ (keV)',
        # yticks=np.arange(0, 1.8, step=0.4)

        # PlotDataCdf(runid='120982W31', yname='te', xname='x', legend=r'MMM',      zval=0.755, source='raw', ymult=1e-3),
        # PlotDataCdf(runid='120982A09', yname='te', xname='x', legend=r'Analysis', zval=0.755, source='raw', ymult=1e-3),
        # title_override=r'120982 (W31, A09), t = 0.62$\,$s',
        # xmin=0, xmax=1, ymin=0, ymax=1.6, ylabel_override=r'$T_{\rm e}$ (keV)',
        # yticks=np.arange(0, 1.8, step=0.4)
  
        # PlotDataCdf(runid='120982W31', yname='condipr', xname='x', legend=r'$\chi_{\rm i, tot}$', zval=0.62, source='raw', ymult=1e-4),
        # PlotDataCdf(runid='120982W31', yname='xkimmm',  xname='x', legend=r'$\chi_{\rm i, MMM}$', zval=0.62, source='raw', ymult=1e-4),
        # PlotDataCdf(runid='120982W31', yname='xkemmm',  xname='x', legend=r'$\chi_{\rm e, MMM}$', zval=0.62, source='raw', ymult=1e-4),
        # title_override=r'120982 (W31), t = 0.62$\,$s',
        # xmin=0, xmax=1, ymin=0, ylabel_override=r'(m$^2$/s)'
  
        ##### ETGM OPTIMIZATION PLOTS

        ## 1: Default plots, no new optimization - show convergence inconsistencies wrt PT Solver convergence
        # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20003, legend=r'10000',),
        # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20002, legend=r'1000',),
        # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20000, legend=r'50',),

        # # 2: 10x5 comparable to 10000
        # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20003, legend=r'10000',),
        # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20002, legend=r'1000',),
        # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20071, legend=r'10x5',),

        # # 3: 2% tolerance + gamma cutoff = no change in results
        # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20071, legend=r'(5000) 10x5',),
        # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20089, legend=r'(4050) 10x5 2%',),

        ## 4: 5% tolerance even faster, but with some error 
        # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20071, legend=r'(5000) 10x5',),
        # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20089, legend=r'(4050) 10x5 2%',),
        # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20086, legend=r'(3300) 10x5 5%',),

        ## 5: 5% tolerance on par with 1000 default scans
        # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20089, legend=r'(4050) 10x5 2%',),
        # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20086, legend=r'(3300) 10x5 5%',),
        # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20002, legend=r'(1E5)  1000 Default',),

        ## 6: New discharge, showing 10x5 = 10000 default
        # PlotDataCsv(runid='129017A04', yname='xteETGM', xname='rho', scan_num=20022, legend=r'(1E7)  10000 Default',),
        # PlotDataCsv(runid='129017A04', yname='xteETGM', xname='rho', scan_num=20000, legend=r'(5000) 10x5',),

        ## 7: Showing different tolerances
        # PlotDataCsv(runid='129017A04', yname='xteETGM', xname='rho', scan_num=20000, legend=r'(5000) 10x5',),
        # PlotDataCsv(runid='129017A04', yname='xteETGM', xname='rho', scan_num=20019, legend=r'(2550) 10x5 2%',),
        # PlotDataCsv(runid='129017A04', yname='xteETGM', xname='rho', scan_num=20020, legend=r'(2120) 10x5 5%',),

        # 8: Different tolerance compared to 50 default
        # PlotDataCsv(runid='129017A04', yname='xteETGM', xname='rho', scan_num=20019, legend=r'(2550) 10x5 2%',),
        # PlotDataCsv(runid='129017A04', yname='xteETGM', xname='rho', scan_num=20020, legend=r'(2120) 10x5 5%',),
        # PlotDataCsv(runid='129017A04', yname='xteETGM', xname='rho', scan_num=20029, legend=r'(1967) 7x10 2%',),
        # PlotDataCsv(runid='129017A04', yname='xteETGM', xname='rho', scan_num=25004, legend=r'(1932) 7x10 2%',),
        # PlotDataCsv(runid='129017A04', yname='xteETGM', xname='rho', scan_num=20021, legend=r'(5000) 50 Default',),

        # PlotDataCsv(runid='129017A04', yname='xteETGM', xname='rho', scan_num=20028, legend=r'(2560) delta kyrhos',),

        ## 9: kyrhos flat-line with gamma cutoff
        # PlotDataCsv(runid='121123K55', yname='gmaETGM', xname='rho', scan_num=20071, legend=r'(5000) 10x5',),
        # PlotDataCsv(runid='121123K55', yname='gmaETGM', xname='rho', scan_num=20089, legend=r'(4050) 10x5 2%',),
        # PlotDataCsv(runid='121123K55', yname='gmaETGM', xname='rho', scan_num=20086, legend=r'(3300) 10x5 5%',),

        # 10: Multi-tiered tolerance check (using kyrhos value)
        # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20089, legend=r'(4050) 10x5 2%',),
        # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20086, legend=r'(3300) 10x5 5%',),
        # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20099, legend=r'(3610) 10x5 2%, 5%',),

        # # 11: Different kyrhos ranges
        # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20109, legend=r'(4050) kyrhos 1-50',),
        # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20108, legend=r'(4010) kyrhos 1-100',),
        # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20110, legend=r'(3960) kyrhos 1-25',),

        ## 12: Exp vs linear (no gc)
        # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20003, legend=r'10000',),
        # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20112, legend=r'(4860) 10x5 2% no gc Linear',),
        # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20113, legend=r'(4640) 10x5 2% no gc Exp',),

        ## 13: Exp vs linear (w/ gc)
        # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20003, legend=r'10000',),
        # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20114, legend=r'(4100) 10x5 2% Linear',),
        # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20089, legend=r'(4050) 10x5 2% Exp',),

        ## 14: Exp vs linear (w/ gc, 5% tol)
        # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20003, legend=r'10000',),
        # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20115, legend=r'(3620) 10x5 5% Linear',),
        # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20086, legend=r'(3300) 10x5 5% Exp',),

        ## Output inconsistency
        # PlotDataCsv(runid='129016A04', yname='gmaETGM', xname='rho', scan_num=25009, legend=r'10000x1',),
        # PlotDataCsv(runid='129016A04', yname='gmaETGM', xname='rho', scan_num=25005, legend=r'7x7',),
        # PlotDataCsv(runid='129016A04', yname='gmaETGM', xname='rho', scan_num=25012, legend=r'8x10',),

        ## Inconsistency gma vs kyrhos
        # PlotDataCsv(runid='129016A04', yname='gmaETGM', xname='kyrhosETGM', scan_num=25027, rho_value=0.13),
        # PlotDataCsv(runid='129016A04', yname='gmaETGM', xname='kyrhosETGM', scan_num=25027, rho_value=0.14),

        ## Testing
        # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20089, legend=r'(4050) 10x5 2%',),
        # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20086, legend=r'(3300) 10x5 5%',),
        # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20111, legend=r'(4100) 10x5 2% Linear',),

        # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20092, legend=r'(3810) $<$1E-2',),
        # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20096, legend=r'(3970) Two tolerances 5e5',),
        # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20099, legend=r'(3610) kyrhos $>$ 5',),

        # PlotDataCsv(runid='121123K55', yname='kyrhosETGM', xname='rho', scan_num=20098, legend=r'(3760) Two tolerances 1e6',),

        # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20089, legend=r'(4050) 10x5 2%',),
        # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20086, legend=r'(3300) 10x5 5%',),
        # # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20123, legend=r'(2802) 6x10 5%',),
        # # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20124, legend=r'(3162) 6x10 4%',),
        # # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20127, legend=r'(3345) 5x10 2%',),
        # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20132, legend=r'(3325) 7x10 2%',),
        # # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20130, legend=r'(2955) 5x10 test',),

        # PlotDataCsv(runid='121123K55', yname='xteETGM', xname='rho', scan_num=20086, legend=r'(3300) 10x5 5%',),

        # ### DBM Testing
        # PlotDataCsv(runid='120968A02', yname='xtiDBM', xname='rho', scan_num=25031, legend=r'5000x1',),
        # PlotDataCsv(runid='120968A02', yname='xtiDBM', xname='rho', scan_num=25029, legend=r'1000x1',),
        # PlotDataCsv(runid='120968A02', yname='xtiDBM', xname='rho', scan_num=25028, legend=r'(2000) 20x1',),
        # PlotDataCsv(runid='120968A02', yname='xtiDBM', xname='rho', scan_num=25032, legend=r'(2107) 7x10',),
        # PlotDataCsv(runid='120968A02', yname='xtiDBM', xname='rho', scan_num=25033, legend=r'(2107) 7x10 gma-wexb',),

    #     PlotDataCsv(runid='120968A02', yname='xtiDBM', xname='rho', scan_num=25038, legend=r'(1526) 7x10 1e3-wexb',),
    #     PlotDataCsv(runid='120968A02', yname='xtiDBM', xname='rho', scan_num=25039, legend=r'(1435) 7x10 1e4-wexb',),
    #     PlotDataCsv(runid='120968A02', yname='xtiDBM', xname='rho', scan_num=25037, legend=r'(2000) 20x1 gma-wexb',),

        # PlotDataCsv(runid='138536A01', yname='gmaDBM', xname='kyrhosDBM', scan_num=25059, rho_value=0.85,),
        # PlotDataCsv(runid='120968A02', yname='gmaDBM', xname='rho', scan_num=26026),
        # PlotDataCsv(runid='120968A02', yname='gmaDBM', xname='rho', scan_num=26027),
        # PlotDataCsv(runid='120968A02', yname='gmaDBM', xname='rmina', scan_num=26032, legend='wexb = 0'),
        # xmax=0.8,

        PlotDataCsv(runid='120968A02', yname='nR8TOMSQZ', xname='rho', scan_num=26044),

    )

    main(fig_data)
